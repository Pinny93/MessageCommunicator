<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MessageCommunicator</name>
    </assembly>
    <members>
        <member name="P:MessageCommunicator.Message.IsMessagePooled">
            <summary>
            Returns true if this message is located inside the <see cref="T:MessageCommunicator.MessagePool"/> currently.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.Count">
            <summary>
            Gets the total count of characters inside the message.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.Capacity">
            <summary>
            Gets the total count of characters reserved in memory for this message.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Message.ToString">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.Message.GetSpan(System.Int32,System.Int32)">
            <summary>
            Gets a span for given offset and length.
            </summary>
            <param name="offset"></param>
            <param name="length"></param>
            <exception cref="T:System.IndexOutOfRangeException">Given offset and length do not match dimension of this message.</exception>
        </member>
        <member name="M:MessageCommunicator.Message.EnsureCapacity(System.Int32)">
            <summary>
            Reserves memory for the given capacity.
            </summary>
            <param name="capacity">The total capacity you expect the message to grow to.</param>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
        </member>
        <member name="M:MessageCommunicator.Message.Clear">
            <summary>
            Clears this message.
            </summary>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
        </member>
        <member name="M:MessageCommunicator.Message.ReturnToPool">
            <summary>
            Returns this message to the <see cref="T:MessageCommunicator.MessagePool"/>.
            The caller has to ensure that this message is not used after returning it to the pool.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.Internals">
            <summary>
            Access to internal objects.
            Be careful when using them, wrong method calls can cause unexpected state!
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.WaitForConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Waits until we've got a valid connection.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Clear">
            <summary>
            Clears current message pool.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Rent(System.Int32)">
            <summary>
            Rents a message from the pool. A new message will be created if there is no one inside the pool.
            </summary>
            <param name="capacity">The capacity of the returned message.</param>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Return(MessageCommunicator.Message)">
            <summary>
            Returns the given message to the message pool.
            </summary>
            <param name="message">The message to be returned.</param>
            <exception cref="T:System.InvalidOperationException">The given message is already pooled.</exception>
        </member>
        <member name="P:MessageCommunicator.MessagePool.CountCachedMessages">
            <summary>
            Total count of messages within the pool.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.ConcurrentObjectPool`1">
            <summary>
            Helper class for reusing objects.
            
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.DelegateMessageReceiveHandler.OnMessageReceived(MessageCommunicator.Message)">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.Util.TcpCommunicatorUtil.GetCountOfDigits(System.Int32)">
            <summary>
            Gets the total count of digits for the given integer.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.IArgSet">
            <summary>
            Specifies an interface for types that act as a set of formatting arguments.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.IArgSet.Count">
            <summary>
            The number of arguments in the set.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.IArgSet.Format(MessageCommunicator.Util.StringBuffer,System.Int32,MessageCommunicator.Util.StringView)">
            <summary>
            Format one of the arguments in the set into the given string buffer.
            </summary>
            <param name="buffer">The buffer to which to append the argument.</param>
            <param name="index">The index of the argument to format.</param>
            <param name="format">A specifier indicating how the argument should be formatted.</param>
        </member>
        <member name="T:MessageCommunicator.Util.IStringFormattable">
            <summary>
            Defines an interface for types that can be formatted into a string buffer.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.IStringFormattable.Format(MessageCommunicator.Util.StringBuffer,MessageCommunicator.Util.StringView)">
            <summary>
            Format the current instance into the given string buffer.
            </summary>
            <param name="buffer">The buffer to which to append.</param>
            <param name="format">A specifier indicating how the argument should be formatted.</param>
        </member>
        <member name="T:MessageCommunicator.Util.StringBuffer">
            <summary>
            A low-allocation version of the built-in <see cref="T:System.Text.StringBuilder"/> type.
            </summary>
            <summary>
            A low-allocation version of the built-in <see cref="T:System.Text.StringBuilder"/> type.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.StringBuffer.Count">
            <summary>
            The number of characters in the buffer.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.StringBuffer.Culture">
            <summary>
            The culture used to format string data.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MessageCommunicator.Util.StringBuffer"/> class.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MessageCommunicator.Util.StringBuffer"/> class.
            </summary>
            <param name="capacity">The initial size of the string buffer.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.SetCustomFormatter``1(System.Action{MessageCommunicator.Util.StringBuffer,``0,MessageCommunicator.Util.StringView})">
            <summary>
            Sets a custom formatter to use when converting instances of a given type to a string.
            </summary>
            <typeparam name="T">The type for which to set the formatter.</typeparam>
            <param name="formatter">A delegate that will be called to format instances of the specified type.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Clear">
            <summary>
            Clears the buffer.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the contents of the buffer to the given array.
            </summary>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="destination">The destination array.</param>
            <param name="destinationIndex">The index within the destination array to which to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Char*,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the buffer to the given array.
            </summary>
            <param name="dest">A pointer to the destination array.</param>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Byte*,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Copies the contents of the buffer to the given byte array.
            </summary>
            <param name="dest">A pointer to the destination byte array.</param>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
            <param name="encoding">The encoding to use to convert characters to bytes.</param>
            <returns>The number of bytes written to the destination.</returns>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.ToString">
            <summary>
            Converts the buffer to a string instance.
            </summary>
            <returns>A new string representing the characters currently in the buffer.</returns>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char)">
            <summary>
            Appends a character to the current buffer.
            </summary>
            <param name="c">The character to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char,System.Int32)">
            <summary>
            Appends a character to the current buffer several times.
            </summary>
            <param name="c">The character to append.</param>
            <param name="count">The number of times to append the character.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.String)">
            <summary>
            Appends the specified string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends a string subset to the current buffer.
            </summary>
            <param name="value">The string to append.</param>
            <param name="startIndex">The starting index within the string to begin reading characters.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends an array of characters to the current buffer.
            </summary>
            <param name="values">The characters to append.</param>
            <param name="startIndex">The starting index within the array to begin reading characters.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char*,System.Int32)">
            <summary>
            Appends an array of characters to the current buffer.
            </summary>
            <param name="str">A pointer to the array of characters to append.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Boolean)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.SByte,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Byte,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int16,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt16,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int32,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt32,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int64,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt64,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Single,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Double,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Decimal,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendArgSet``1(System.String,``0@)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.
            Each format item is replaced by the string representation of a single argument.
            </summary>
            <typeparam name="T">The type of argument set being formatted.</typeparam>
            <param name="format">A composite format string.</param>
            <param name="args">The set of args to insert into the format string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``1(System.String,``0)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``1(System.String,``0)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``2(System.String,``0,``1)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``2(System.String,``0,``1)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``3(System.String,``0,``1,``2)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``3(System.String,``0,``1,``2)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``4(System.String,``0,``1,``2,``3)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``4(System.String,``0,``1,``2,``3)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>
            <param name="arg7">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>
            <param name="arg7">A value to format.</param>   
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.Logger">
            <summary>
            A custom logger. If set, this delegate will be called with all relevant events.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.StartAsync">
            <summary>
            Start the communicator.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.StopAsync">
            <summary>
            Stops the communicator.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.WaitForConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Waits for successful connection with a partner.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.Log(MessageCommunicator.LoggingMessageType,System.String,System.String,System.Exception)">
            <summary>
            Calls current logger with the given message.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.SendAsync(MessageCommunicator.ReadOnlySendOrReceiveBuffer{System.Byte})">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.IByteStreamHandler.MessageRecognizer">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IMessageRecognizer"/> which gets notified when we received bytes from the connected partner.
            </summary>
        </member>
        <member name="M:MessageCommunicator.IByteStreamHandler.SendAsync(MessageCommunicator.ReadOnlySendOrReceiveBuffer{System.Byte})">
            <summary>
            Sends the given bytes to the connected partner.
            </summary>
            <param name="buffer">The bytes to be sent.</param>
            <returns>True if sending was successful, otherwise false.</returns>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.State">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.#ctor(System.String,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter)">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.StartInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.StopInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.GetCurrentSendSocket">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandlerSettings.CreateByteStreamHandler">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.SendAsync(MessageCommunicator.ReadOnlySendOrReceiveBuffer{System.Byte})">
            <summary>
            Tries to send the given message to the currently connected partner
            </summary>
            <param name="buffer">The bytes to be sent</param>
            <returns>True when sending was successful</returns>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.RunReceiveLoopAsync(System.Net.Sockets.TcpClient,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Internal method which reacts on incoming bytes on the currently active tcp client connection.
            Only one of this connection is active at one time.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.ActualListeningPort">
            <summary>
            Gets the true listening port in case ListeningPort is set to 0.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.State">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.StartInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.StopInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.CreateByteStreamHandler">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.IMessageRecognizer.ByteStreamHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IByteStreamHandler"/> which will be called inside the send method.
            </summary>
        </member>
        <member name="M:MessageCommunicator.IMessageRecognizer.OnReceivedBytes(System.Boolean,MessageCommunicator.ReadOnlySendOrReceiveBuffer{System.Byte})">
            <summary>
            Notifies received bytes.
            Be careful, this method is called from the receive event of the <see cref="T:MessageCommunicator.TcpByteStreamHandler"/> loop.
            Ensure that you block the calling thread as short as possible.
            </summary>
            <param name="isNewConnection">This flag is set to true when the given bytes are the first ones from a new connection. Typically this triggers receive buffer cleanup before processing received bytes.</param>
            <param name="receivedBytes">A span containing all received bytes.</param>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizer.SendAsync(System.ReadOnlySpan{System.Char})">
            <summary>
            Sends the given message to the partner.
            </summary>
            <param name="rawMessage">The message to be sent.</param>
            <returns>True if sending was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentException">Invalid message.</exception>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizer.OnReceivedBytes(System.Boolean,MessageCommunicator.ReadOnlySendOrReceiveBuffer{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.OnReceivedBytes(System.Boolean,MessageCommunicator.ReadOnlySendOrReceiveBuffer{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.OnReceivedBytes(System.Boolean,MessageCommunicator.ReadOnlySendOrReceiveBuffer{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
    </members>
</doc>
