<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MessageCommunicator</name>
    </assembly>
    <members>
        <member name="T:MessageCommunicator.Message">
            <summary>
            This class provides some manipulation methods for a character based message.
            Also, there is an integration pooling mechanism using <see cref="T:MessageCommunicator.MessagePool"/> class to avoid object allocations during communication between two partners.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.IsMessagePooled">
            <summary>
            Returns true if this message is located inside the <see cref="T:MessageCommunicator.MessagePool"/> currently.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.Count">
            <summary>
            Gets the total count of characters inside the message.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.Capacity">
            <summary>
            Gets the total count of characters reserved in memory for this message.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Message.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.Message"/> with tie given capacity.
            </summary>
            <param name="capacity">The total count of characters that are expected to be in this <see cref="T:MessageCommunicator.Message"/></param>
        </member>
        <member name="M:MessageCommunicator.Message.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.Message"/> with the given content.
            </summary>
            <param name="rawMessage">Initial content of the <see cref="T:MessageCommunicator.Message"/>.</param>
        </member>
        <member name="M:MessageCommunicator.Message.ToString">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.Message.GetSpan(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> for given offset and length.
            </summary>
            <param name="offset">The offset where the <see cref="T:System.Span`1"/> should start.</param>
            <param name="length">Total length for the <see cref="T:System.Span`1"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">Given offset and length do not match dimension of this message.</exception>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.Span`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.GetSpan">
            <summary>
            Gets a <see cref="T:System.Span`1"/> for the full content of this <see cref="T:MessageCommunicator.Message"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.Span`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.GetSpanReadOnly(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> for given offset and length.
            </summary>
            <param name="offset">The offset where the <see cref="T:System.ReadOnlySpan`1"/> should start.</param>
            <param name="length">Total length for the <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">Given offset and length do not match dimension of this message.</exception>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.ReadOnlySpan`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.GetSpanReadOnly">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> for the full content of this <see cref="T:MessageCommunicator.Message"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.ReadOnlySpan`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.EnsureCapacity(System.Int32)">
            <summary>
            Reserves memory for the given capacity.
            </summary>
            <param name="capacity">The total capacity you expect the message to grow to.</param>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
        </member>
        <member name="M:MessageCommunicator.Message.Clear">
            <summary>
            Clears this message.
            </summary>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
        </member>
        <member name="M:MessageCommunicator.Message.Append(System.String)">
            <summary>
            Appends the given <see cref="T:System.String"/> to this <see cref="T:MessageCommunicator.Message"/>.
            </summary>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:MessageCommunicator.Message.ReturnToPool">
            <summary>
            Returns this message to the <see cref="T:MessageCommunicator.MessagePool"/>.
            The caller has to ensure that this message is not used after returning it to the pool.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessageChannel">
            <summary>
            This class provides all functionality to build up a communication channel with a remote partner.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.State">
            <summary>
            Gets the current state of the underlying connection (<see cref="T:MessageCommunicator.IByteStreamHandler"/>).
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.IsRunning">
            <summary>
            Returns true if this <see cref="T:MessageCommunicator.MessageChannel"/> is running currently.
            If the <see cref="T:MessageCommunicator.MessageChannel"/> is running than this does not mean automatically that it is connected to a remote partner.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.LocalEndpointDescription">
            <summary>
            Gets a short description of the local endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.RemoteEndpointDescription">
            <summary>
            Gets a short description of the remote endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.ReceiveHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> which gets notified on a received <see cref="T:MessageCommunicator.Message"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.Internals">
            <summary>
            Access to internal objects.
            Be careful when using them, wrong method calls can cause unexpected state!
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.#ctor(MessageCommunicator.ByteStreamHandlerSettings,MessageCommunicator.MessageRecognizerSettings,MessageCommunicator.IMessageReceiveHandler,MessageCommunicator.IMessageCommunicatorLogger)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.MessageChannel"/> object.
            </summary>
            <param name="byteStreamHandlerSettings">Settings for building the <see cref="T:MessageCommunicator.IByteStreamHandler"/>.</param>
            <param name="messageRecognizerSettings">Settings for building the <see cref="T:MessageCommunicator.IMessageRecognizer"/>.</param>
            <param name="receiveHandler">The <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> which gets notified on a received <see cref="T:MessageCommunicator.Message"/>.</param>
            <param name="logger">The <see cref="T:MessageCommunicator.IMessageCommunicatorLogger"/> to which all logging messages are passed.</param>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.#ctor(MessageCommunicator.ByteStreamHandlerSettings,MessageCommunicator.MessageRecognizerSettings,System.Action{MessageCommunicator.Message},MessageCommunicator.IMessageCommunicatorLogger)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.MessageChannel"/> object.
            </summary>
            <param name="byteStreamHandlerSettings">Settings for building the <see cref="T:MessageCommunicator.IByteStreamHandler"/>.</param>
            <param name="messageRecognizerSettings">Settings for building the <see cref="T:MessageCommunicator.IMessageRecognizer"/>.</param>
            <param name="receiveHandler">A delegate which gets notified on a received <see cref="T:MessageCommunicator.Message"/>.</param>
            <param name="logger">The <see cref="T:MessageCommunicator.IMessageCommunicatorLogger"/> to which all logging messages are passed.</param>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.WaitForConnectionAsync">
            <summary>
            Waits until we've got a valid connection.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.WaitForConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Waits until we've got a valid connection.
            </summary>
            <param name="cancelToken">The <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the wait task.</param>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.SendAsync(System.ReadOnlySpan{System.Char})">
            <summary>
            Sends the given message to the remote partner.
            </summary>
            <param name="rawMessage">The message to be sent as <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>Returns true if message was sent successfully, otherwise false.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.SendAsync(System.String)">
            <summary>
            Sends the given message to the remote partner.
            </summary>
            <param name="rawMessage">The message to be sent as <see cref="T:System.String"/>.</param>
            <returns>Returns true if message was sent successfully, otherwise false.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.SendAsync(MessageCommunicator.Message)">
            <summary>
            Sends the given message to the remote partner.
            </summary>
            <param name="message">The message to be sent as <see cref="T:MessageCommunicator.Message"/>.</param>
            <returns>Returns true if message was sent successfully, otherwise false.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.StartAsync">
            <summary>
            Starts this channel.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.StopAsync">
            <summary>
            Stops this channel.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessageChannel.MessageChannelInternals">
            <summary>
            Gives access to underlying objects of a <see cref="T:MessageCommunicator.MessageChannel"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.MessageChannelInternals.ByteStreamHandler">
            <summary>
            Gets the underlying <see cref="T:MessageCommunicator.IByteStreamHandler"/> object.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.MessageChannelInternals.MessageRecognizer">
            <summary>
            Gets the underlying <see cref="T:MessageCommunicator.IMessageRecognizer"/> object.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessagePool">
            <summary>
            This class provides an integrated pooling mechanism to avoid object allocations during communication between two partners.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Clear">
            <summary>
            Clears current message pool.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Rent(System.Int32)">
            <summary>
            Rents a message from the pool. A new message will be created if there is no one inside the pool.
            </summary>
            <param name="capacity">The capacity of the returned message.</param>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Return(MessageCommunicator.Message)">
            <summary>
            Returns the given message to the message pool.
            </summary>
            <param name="message">The message to be returned.</param>
            <exception cref="T:System.InvalidOperationException">The given message is already pooled.</exception>
        </member>
        <member name="P:MessageCommunicator.MessagePool.CountCachedMessages">
            <summary>
            Total count of messages within the pool.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.ConcurrentObjectPool`1">
            <summary>
            Helper class for reusing objects.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.DelegateMessageReceiveHandler">
            <summary>
            Helper class for <see cref="T:MessageCommunicator.MessageChannel"/>.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.DelegateMessageReceiveHandler.#ctor(System.Action{MessageCommunicator.Message})">
            <summary>
            Builds an <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> implementation based on the given delegate.
            </summary>
            <param name="receiveHandler">The delegate to be called on received messages.</param>
        </member>
        <member name="M:MessageCommunicator.Util.DelegateMessageReceiveHandler.OnMessageReceived(MessageCommunicator.Message)">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.Util.TcpCommunicatorUtil.GetCountOfDigits(System.Int32)">
            <summary>
            Gets the total count of digits for the given integer.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.IArgSet">
            <summary>
            Specifies an interface for types that act as a set of formatting arguments.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.IArgSet.Count">
            <summary>
            The number of arguments in the set.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.IArgSet.Format(MessageCommunicator.Util.StringBuffer,System.Int32,MessageCommunicator.Util.StringView)">
            <summary>
            Format one of the arguments in the set into the given string buffer.
            </summary>
            <param name="buffer">The buffer to which to append the argument.</param>
            <param name="index">The index of the argument to format.</param>
            <param name="format">A specifier indicating how the argument should be formatted.</param>
        </member>
        <member name="T:MessageCommunicator.Util.IStringFormattable">
            <summary>
            Defines an interface for types that can be formatted into a string buffer.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.IStringFormattable.Format(MessageCommunicator.Util.StringBuffer,MessageCommunicator.Util.StringView)">
            <summary>
            Format the current instance into the given string buffer.
            </summary>
            <param name="buffer">The buffer to which to append.</param>
            <param name="format">A specifier indicating how the argument should be formatted.</param>
        </member>
        <member name="T:MessageCommunicator.Util.StringBuffer">
            <summary>
            A low-allocation version of the built-in <see cref="T:System.Text.StringBuilder"/> type.
            </summary>
            <summary>
            A low-allocation version of the built-in <see cref="T:System.Text.StringBuilder"/> type.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.StringBuffer.Count">
            <summary>
            The number of characters in the buffer.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.StringBuffer.Culture">
            <summary>
            The culture used to format string data.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MessageCommunicator.Util.StringBuffer"/> class.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MessageCommunicator.Util.StringBuffer"/> class.
            </summary>
            <param name="capacity">The initial size of the string buffer.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.SetCustomFormatter``1(System.Action{MessageCommunicator.Util.StringBuffer,``0,MessageCommunicator.Util.StringView})">
            <summary>
            Sets a custom formatter to use when converting instances of a given type to a string.
            </summary>
            <typeparam name="T">The type for which to set the formatter.</typeparam>
            <param name="formatter">A delegate that will be called to format instances of the specified type.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Clear">
            <summary>
            Clears the buffer.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the contents of the buffer to the given array.
            </summary>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="destination">The destination array.</param>
            <param name="destinationIndex">The index within the destination array to which to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Char*,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the buffer to the given array.
            </summary>
            <param name="dest">A pointer to the destination array.</param>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Byte*,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Copies the contents of the buffer to the given byte array.
            </summary>
            <param name="dest">A pointer to the destination byte array.</param>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
            <param name="encoding">The encoding to use to convert characters to bytes.</param>
            <returns>The number of bytes written to the destination.</returns>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.ToString">
            <summary>
            Converts the buffer to a string instance.
            </summary>
            <returns>A new string representing the characters currently in the buffer.</returns>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char)">
            <summary>
            Appends a character to the current buffer.
            </summary>
            <param name="c">The character to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char,System.Int32)">
            <summary>
            Appends a character to the current buffer several times.
            </summary>
            <param name="c">The character to append.</param>
            <param name="count">The number of times to append the character.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.String)">
            <summary>
            Appends the specified string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends a string subset to the current buffer.
            </summary>
            <param name="value">The string to append.</param>
            <param name="startIndex">The starting index within the string to begin reading characters.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends an array of characters to the current buffer.
            </summary>
            <param name="values">The characters to append.</param>
            <param name="startIndex">The starting index within the array to begin reading characters.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char*,System.Int32)">
            <summary>
            Appends an array of characters to the current buffer.
            </summary>
            <param name="str">A pointer to the array of characters to append.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Boolean)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.SByte,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Byte,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int16,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt16,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int32,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt32,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int64,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt64,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Single,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Double,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Decimal,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendArgSet``1(System.String,``0@)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.
            Each format item is replaced by the string representation of a single argument.
            </summary>
            <typeparam name="T">The type of argument set being formatted.</typeparam>
            <param name="format">A composite format string.</param>
            <param name="args">The set of args to insert into the format string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``1(System.String,``0)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``1(System.String,``0)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``2(System.String,``0,``1)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``2(System.String,``0,``1)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``3(System.String,``0,``1,``2)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``3(System.String,``0,``1,``2)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``4(System.String,``0,``1,``2,``3)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``4(System.String,``0,``1,``2,``3)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>
            <param name="arg7">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>
            <param name="arg7">A value to format.</param>   
        </member>
        <member name="T:MessageCommunicator.FixedReconnectWaitTimeGetter">
            <summary>
            This class is responsible to get the wait time before reconnect when a connection on a <see cref="T:MessageCommunicator.IByteStreamHandler"/> got lost.
            In this implementation we use always the same wait time.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedReconnectWaitTimeGetter.#ctor(System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedReconnectWaitTimeGetter"/>.
            </summary>
            <param name="fixedWaitTime">The time to be waited before each reconnect.</param>
        </member>
        <member name="M:MessageCommunicator.FixedReconnectWaitTimeGetter.GetWaitTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.ReconnectWaitTimeGetter">
            <summary>
            This class is responsible to get the wait time before reconnect when a connection on a <see cref="T:MessageCommunicator.IByteStreamHandler"/> got lost.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ReconnectWaitTimeGetter.GetWaitTime(System.Int32)">
            <summary>
            Gets the next wait time before trying to reconnect.
            </summary>
            <param name="errorCountSinceLastConnect">Total count of connection errors since last established connection.</param>
        </member>
        <member name="T:MessageCommunicator.ByteStreamHandler">
            <summary>
            A <see cref="T:MessageCommunicator.ByteStreamHandler"/> is responsible for sending / receiving bytes to the connected partner. It also manages the connection, triggers reconnect after
            disconnect and so on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.IsRunning">
            <summary>
            Returns true if this instance is in running state, otherwise false.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.LocalEndpointDescription">
            <summary>
            Gets a short description of the local endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.RemoteEndpointDescription">
            <summary>
            Gets a short description of the remote endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.Logger">
            <summary>
            Gets or sets a custom logger. If set, this delegate will be called with all relevant events.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.MessageRecognizer">
            <summary>
            The <see cref="T:MessageCommunicator.IMessageRecognizer"/> to which to forward all received bytes.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.StartAsync">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.StopAsync">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.WaitForConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Waits for successful connection with a partner.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.Log(MessageCommunicator.LoggingMessageType,System.String,System.String,System.Exception)">
            <summary>
            Calls current logger with the given message.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.SendAsync(System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.ByteStreamHandlerSettings">
            <summary>
            A container for all settings regarding a <see cref="T:MessageCommunicator.ByteStreamHandler"/> object.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandlerSettings.CreateByteStreamHandler">
            <summary>
            The factory method for a <see cref="T:MessageCommunicator.ByteStreamHandler"/> implementation.
            </summary>
            <returns>A new <see cref="T:MessageCommunicator.ByteStreamHandler"/> with configuration from this instance.</returns>
        </member>
        <member name="T:MessageCommunicator.IByteStreamHandler">
            <summary>
            A <see cref="T:MessageCommunicator.IByteStreamHandler"/> is responsible for sending / receiving bytes to the connected partner. It also manages the connection, triggers reconnect after
            disconnect and so on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.IByteStreamHandler.MessageRecognizer">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IMessageRecognizer"/> which gets notified when we received bytes from the connected partner.
            </summary>
        </member>
        <member name="M:MessageCommunicator.IByteStreamHandler.SendAsync(System.ArraySegment{System.Byte})">
            <summary>
            Sends the given bytes to the connected partner.
            </summary>
            <param name="buffer">The bytes to be sent.</param>
            <returns>True if sending was successful, otherwise false.</returns>
        </member>
        <member name="T:MessageCommunicator.TcpActiveByteStreamHandler">
            <summary>
            This <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation sends/receives bytes over a TCP socket. This implementation connects defined port on a
            defined <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.RemoteHost">
            <summary>
            Gets the name er ip address of the remote host.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.RemoteIPAddress">
            <summary>
            Gets the remote ip address.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.RemotePort">
            <summary>
            Gets the remote port.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.State">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.#ctor(System.String,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandler"/> instance.
            </summary>
            <param name="remoteHost">The dns name or string encoded ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="T:MessageCommunicator.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandler"/> instance.
            </summary>
            <param name="remoteIP">The ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="T:MessageCommunicator.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.StartInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.StopInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.GetCurrentSendSocket">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.TcpActiveByteStreamHandlerSettings">
            <summary>
            This class provides all relevant settings for <see cref="T:MessageCommunicator.TcpActiveByteStreamHandler"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.RemoteHost">
            <summary>
            Gets or sets the hostname or ip address of the remote host.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.RemoteIP">
            <summary>
            Gets or sets the <see cref="T:System.Net.IPAddress"/> of the remote host.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.RemotePort">
            <summary>
            Gets or sets the remote port.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> instance.
            </summary>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandlerSettings.#ctor(System.String,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandlerSettings"/> instance.
            </summary>
            <param name="remoteHost">The dns name or string encoded ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandlerSettings.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandlerSettings"/> instance.
            </summary>
            <param name="remoteIP">The ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandlerSettings.CreateByteStreamHandler">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.TcpByteStreamHandler">
            <summary>
            This <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation sends/receives bytes over a TCP socket.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.ReconnectWaitTimeGetter">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.TcpByteStreamHandler.ReconnectWaitTimeGetter"/> which controls the wait time before reconnect after lost connections.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.RemoteEndpointDescription">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.LocalEndpointDescription">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.ReceiveBufferSize">
            <summary>
            Gets or sets the size of the receive buffer.
            </summary>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.#ctor(MessageCommunicator.ReconnectWaitTimeGetter)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpByteStreamHandler"/>.
            </summary>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.WaitByReconnectWaitTimeAsync(System.Int32)">
            <summary>
            A helper method
            </summary>
            <param name="errorCountSinceLastConnect"></param>
            <returns></returns>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.SendAsync(System.ArraySegment{System.Byte})">
            <summary>
            Tries to send the given message to the currently connected partner
            </summary>
            <param name="buffer">The bytes to be sent</param>
            <returns>True when sending was successful</returns>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.GetCurrentSendSocket">
            <summary>
            Gets the current <see cref="T:System.Net.Sockets.TcpClient"/> object for sending.
            This method returns null when this <see cref="T:MessageCommunicator.IByteStreamHandler"/> is not connected to a remote partner.
            </summary>
            <returns>The <see cref="T:System.Net.Sockets.TcpClient"/> object for sending</returns>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.RunReceiveLoopAsync(System.Net.Sockets.TcpClient,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Internal method which reacts on incoming bytes on the currently active tcp client connection.
            Only one of this connection is active at one time.
            </summary>
        </member>
        <member name="T:MessageCommunicator.TcpPassiveByteStreamHandler">
            <summary>
            This <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation sends/receives bytes over a TCP socket. This implementation listens on a defined port and waits for
            an incoming connection.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.ListeningIPAddress">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> this instance is listening on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.ListeningPort">
            <summary>
            Gets the configured listening port.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.ActualListeningPort">
            <summary>
            Gets the true listening port in case ListeningPort is set to 0.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.State">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter)">
            <summary>
            Create a new <see cref="T:MessageCommunicator.TcpPassiveByteStreamHandler"/> instance.
            </summary>
            <param name="listeningIPAddress">The <see cref="T:System.Net.IPAddress"/> this instance should listen on.</param>
            <param name="listeningPort">The port his instance should listen on. Pass 0 here if the OS should decide which port to use.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="T:MessageCommunicator.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.StartInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.StopInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.GetCurrentSendSocket">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.TcpPassiveByteStreamHandlerSettings">
            <summary>
            This class provides all relevant settings for <see cref="T:MessageCommunicator.TcpPassiveByteStreamHandler"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ListeningIPAddress">
            <summary>
            Gets or sets the <see cref="T:System.Net.IPAddress"/> to listening on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ListeningPort">
            <summary>
            Gets or sets the port to listen on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ReconnectWaitTimeGetter">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> instance.
            </summary>
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter)">
            <summary>
            Create a new <see cref="T:MessageCommunicator.TcpPassiveByteStreamHandler"/> instance.
            </summary>
            <param name="listeningIPAddress">The <see cref="T:System.Net.IPAddress"/> to listen on.</param>
            <param name="listeningPort">The port to listen on. Pass 0 here if the OS should decide which port to use.</param>
            <param name="reconnectWaitTimeGetter">The <exception cref="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"> which generates wait times after broke connection and before reconnect.</exception></param>
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.CreateByteStreamHandler">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.MessageCommunicatorExtensions.GetCharCount(System.Text.Decoder,System.ArraySegment{System.Byte})">
            <summary>
            Gets the total count of characters in the given <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <param name="decoder">The <see cref="T:System.Text.Decoder"/> object which is created by an <see cref="T:System.Text.Encoding"/>.</param>
            <param name="arraySegment">The <see cref="T:System.ArraySegment`1"/> referencing all relevant bytes.</param>
            <returns>Total count of characters inside given buffer.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageCommunicatorExtensions.GetChars(System.Text.Decoder,System.ArraySegment{System.Byte},System.ArraySegment{System.Char})">
            <summary>
            Parses all characters in the given <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <param name="decoder">The <see cref="T:System.Text.Decoder"/> object which is created by an <see cref="T:System.Text.Encoding"/>.</param>
            <param name="source">The <see cref="T:System.ArraySegment`1"/> referencing all relevant bytes.</param>
            <param name="target">The <see cref="T:System.ArraySegment`1"/> referencing to the target character buffer.</param>
            <returns>Total count of characters parsed.</returns>
        </member>
        <member name="T:MessageCommunicator.IMessageRecognizer">
            <summary>
            A <see cref="T:MessageCommunicator.IMessageRecognizer"/> is responsible to recognize incoming messages and for formatting
            outgoing messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.IMessageRecognizer.ByteStreamHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IByteStreamHandler"/> which will be called inside the send method.
            </summary>
        </member>
        <member name="M:MessageCommunicator.IMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <summary>
            Notifies received bytes.
            Be careful, this method is called from the receive event of the <see cref="T:MessageCommunicator.TcpByteStreamHandler"/> loop.
            Ensure that you block the calling thread as short as possible.
            </summary>
            <param name="isNewConnection">This flag is set to true when the given bytes are the first ones from a new connection. Typically this triggers receive buffer cleanup before processing received bytes.</param>
            <param name="receivedBytes">A span containing all received bytes.</param>
        </member>
        <member name="T:MessageCommunicator.MessageRecognitionException">
            <summary>
            This exception type is thrown during message recognition in an <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessageRecognizer">
            <summary>
            A <see cref="T:MessageCommunicator.MessageRecognizer"/> is responsible to recognize incoming messages and for formatting
            outgoing messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageRecognizer.ByteStreamHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation to which to forward messages to be sent.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageRecognizer.ReceiveHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> implementation to which to forward all recognized messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageRecognizer.Logger">
            <summary>
            Gets or sets a custom logger. If set, this delegate will be called with all relevant events.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizer.SendAsync(System.ReadOnlySpan{System.Char})">
            <summary>
            Sends the given message to the partner.
            </summary>
            <param name="rawMessage">The message to be sent.</param>
            <returns>True if sending was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentException">Invalid message.</exception>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.MessageRecognizerSettings">
            <summary>
            Encapsulates all settings for an <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizerSettings.CreateMessageRecognizer">
            <summary>
            Factory method which creates an <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.
            </summary>
            <returns>The created <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.</returns>
        </member>
        <member name="T:MessageCommunicator.DefaultMessageRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implements a custom messages style of the MessageCommunicator
            project. 
            </summary>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.DefaultMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.DefaultMessageRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.DefaultMessageRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.DefaultMessageRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.DefaultMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizerSettings.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.DefaultMessageRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.DefaultMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.EndSymbolsMessageRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implementation recognizes messages with one or more end symbols.
            </summary>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizer.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.EndSymbolsMessageRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.EndSymbols">
            <summary>
            Gets or sets the end symbols of received/sent messages.
            </summary>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizerSettings.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implementation recognizes messages with one or more end symbols and
            a fixed length.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer.#ctor(System.Text.Encoding,System.String,System.Int32,System.Char)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
            <param name="lengthIncludingEndSymbols">Total length of received/sent messages.</param>
            <param name="fillSymbol">Fill symbol for messages shorter than the fixed length.</param>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.EndSymbols">
            <summary>
            Gets or sets the end symbols of received/sent messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.LengthIncludingEndSymbols">
            <summary>
            Gets or sets the total length of received/sent messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.FillSymbol">
            <summary>
            Gets or sets the fill symbol for messages shorter than the fixed length.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.#ctor(System.Text.Encoding,System.String,System.Int32,System.Char)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
            <param name="lengthIncludingEndSymbols">Total length of received/sent messages.</param>
            <param name="fillSymbol">Fill symbol for messages shorter than the fixed length.</param>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.StartAndEndSymbolsRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implementation recognizes messages with one or more start and end symbols.
            </summary>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.#ctor(System.Text.Encoding,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="startSymbols">The start symbols of received/sent messages.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.StartAndEndSymbolsRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.StartAndEndSymbolsRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.StartSymbols">
            <summary>
            Gets or sets the start symbols of received/sent messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.EndSymbols">
            <summary>
            Gets or sets the end symbols of received/sent messages.
            </summary>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.#ctor(System.Text.Encoding,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.StartAndEndSymbolsRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="startSymbols">The start symbols of received/sent messages.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
    </members>
</doc>
