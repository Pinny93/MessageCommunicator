<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MessageCommunicator</name>
    </assembly>
    <members>
        <member name="T:MessageCommunicator.Message">
            <summary>
            This class provides some manipulation methods for a character based message.
            Also, there is an integration pooling mechanism using <see cref="T:MessageCommunicator.MessagePool"/> class to avoid object allocations during communication between two partners.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.IsMessagePooled">
            <summary>
            Returns true if this message is located inside the <see cref="T:MessageCommunicator.MessagePool"/> currently.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.Count">
            <summary>
            Gets the total count of characters inside the message.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Message.Capacity">
            <summary>
            Gets the total count of characters reserved in memory for this message.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Message.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.Message"/> with tie given capacity.
            </summary>
            <param name="capacity">The total count of characters that are expected to be in this <see cref="T:MessageCommunicator.Message"/></param>
        </member>
        <member name="M:MessageCommunicator.Message.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.Message"/> with the given content.
            </summary>
            <param name="rawMessage">Initial content of the <see cref="T:MessageCommunicator.Message"/>.</param>
        </member>
        <member name="M:MessageCommunicator.Message.ToString">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.Message.GetSpan(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> for given offset and length.
            </summary>
            <param name="offset">The offset where the <see cref="T:System.Span`1"/> should start.</param>
            <param name="length">Total length for the <see cref="T:System.Span`1"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">Given offset and length do not match dimension of this message.</exception>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.Span`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.GetSpan">
            <summary>
            Gets a <see cref="T:System.Span`1"/> for the full content of this <see cref="T:MessageCommunicator.Message"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.Span`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.GetSpanReadOnly(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> for given offset and length.
            </summary>
            <param name="offset">The offset where the <see cref="T:System.ReadOnlySpan`1"/> should start.</param>
            <param name="length">Total length for the <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <exception cref="T:System.IndexOutOfRangeException">Given offset and length do not match dimension of this message.</exception>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.ReadOnlySpan`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.GetSpanReadOnly">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> for the full content of this <see cref="T:MessageCommunicator.Message"/>.
            </summary>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
            <returns>The requested <see cref="T:System.ReadOnlySpan`1"/> structure.</returns>
        </member>
        <member name="M:MessageCommunicator.Message.EnsureCapacity(System.Int32)">
            <summary>
            Reserves memory for the given capacity.
            </summary>
            <param name="capacity">The total capacity you expect the message to grow to.</param>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
        </member>
        <member name="M:MessageCommunicator.Message.Clear">
            <summary>
            Clears this message.
            </summary>
            <exception cref="T:System.InvalidOperationException">The message is cached inside the pool currently.</exception>
        </member>
        <member name="M:MessageCommunicator.Message.Append(System.String)">
            <summary>
            Appends the given <see cref="T:System.String"/> to this <see cref="T:MessageCommunicator.Message"/>.
            </summary>
            <param name="value">The value to be added.</param>
        </member>
        <member name="M:MessageCommunicator.Message.ReturnToPool">
            <summary>
            Returns this message to the <see cref="T:MessageCommunicator.MessagePool"/>.
            The caller has to ensure that this message is not used after returning it to the pool.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessageChannel">
            <summary>
            This class provides all functionality to build up a communication channel with a remote partner.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.State">
            <summary>
            Gets the current state of the underlying connection (<see cref="T:MessageCommunicator.IByteStreamHandler"/>).
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.IsRunning">
            <summary>
            Returns true if this <see cref="T:MessageCommunicator.MessageChannel"/> is running currently.
            If the <see cref="T:MessageCommunicator.MessageChannel"/> is running than this does not mean automatically that it is connected to a remote partner.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.LocalEndpointDescription">
            <summary>
            Gets a short description of the local endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.RemoteEndpointDescription">
            <summary>
            Gets a short description of the remote endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.ReceiveHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> which gets notified on a received <see cref="T:MessageCommunicator.Message"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.LastReceivedMessageTimestampUtc">
            <summary>
            Gets the timestamp in UTC when we've received the last <see cref="T:MessageCommunicator.Message"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.LastReceivedDataBlockTimestampUtc">
            <summary>
            Gets the timestamp from the last successfully received data block (utc).
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.LastConnectTimestampUtc">
            <summary>
            Gets the timestamp from the last successful connection (utc).
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.Internals">
            <summary>
            Access to internal objects.
            Be careful when using them, wrong method calls can cause unexpected state!
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.#ctor(MessageCommunicator.ByteStreamHandlerSettings,MessageCommunicator.MessageRecognizerSettings,MessageCommunicator.IMessageReceiveHandler,MessageCommunicator.IMessageCommunicatorLogger)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.MessageChannel"/> object.
            </summary>
            <param name="byteStreamHandlerSettings">Settings for building the <see cref="T:MessageCommunicator.IByteStreamHandler"/>.</param>
            <param name="messageRecognizerSettings">Settings for building the <see cref="T:MessageCommunicator.IMessageRecognizer"/>.</param>
            <param name="receiveHandler">The <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> which gets notified on a received <see cref="T:MessageCommunicator.Message"/>.</param>
            <param name="logger">The <see cref="T:MessageCommunicator.IMessageCommunicatorLogger"/> to which all logging messages are passed.</param>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.#ctor(MessageCommunicator.ByteStreamHandlerSettings,MessageCommunicator.MessageRecognizerSettings,System.Action{MessageCommunicator.Message},MessageCommunicator.IMessageCommunicatorLogger)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.MessageChannel"/> object.
            </summary>
            <param name="byteStreamHandlerSettings">Settings for building the <see cref="T:MessageCommunicator.IByteStreamHandler"/>.</param>
            <param name="messageRecognizerSettings">Settings for building the <see cref="T:MessageCommunicator.IMessageRecognizer"/>.</param>
            <param name="receiveHandler">A delegate which gets notified on a received <see cref="T:MessageCommunicator.Message"/>.</param>
            <param name="logger">The <see cref="T:MessageCommunicator.IMessageCommunicatorLogger"/> to which all logging messages are passed.</param>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.WaitForConnectionAsync">
            <summary>
            Waits until we've got a valid connection.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.WaitForConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Waits until we've got a valid connection.
            </summary>
            <param name="cancelToken">The <see cref="T:System.Threading.CancellationToken"/> which can be used to cancel the wait task.</param>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.SendAsync(System.ReadOnlySpan{System.Char})">
            <summary>
            Sends the given message to the remote partner.
            </summary>
            <param name="rawMessage">The message to be sent as <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>Returns true if message was sent successfully, otherwise false.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.SendAsync(System.String)">
            <summary>
            Sends the given message to the remote partner.
            </summary>
            <param name="rawMessage">The message to be sent as <see cref="T:System.String"/>.</param>
            <returns>Returns true if message was sent successfully, otherwise false.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.SendAsync(MessageCommunicator.Message)">
            <summary>
            Sends the given message to the remote partner.
            </summary>
            <param name="message">The message to be sent as <see cref="T:MessageCommunicator.Message"/>.</param>
            <returns>Returns true if message was sent successfully, otherwise false.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.StartAsync">
            <summary>
            Starts this channel.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageChannel.StopAsync">
            <summary>
            Stops this channel.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessageChannel.MessageChannelInternals">
            <summary>
            Gives access to underlying objects of a <see cref="T:MessageCommunicator.MessageChannel"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.MessageChannelInternals.ByteStreamHandler">
            <summary>
            Gets the underlying <see cref="T:MessageCommunicator.IByteStreamHandler"/> object.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageChannel.MessageChannelInternals.MessageRecognizer">
            <summary>
            Gets the underlying <see cref="T:MessageCommunicator.IMessageRecognizer"/> object.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessagePool">
            <summary>
            This class provides an integrated pooling mechanism to avoid object allocations during communication between two partners.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Clear">
            <summary>
            Clears current message pool.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Rent(System.Int32)">
            <summary>
            Rents a message from the pool. A new message will be created if there is no one inside the pool.
            </summary>
            <param name="capacity">The capacity of the returned message.</param>
        </member>
        <member name="M:MessageCommunicator.MessagePool.Return(MessageCommunicator.Message)">
            <summary>
            Returns the given message to the message pool.
            </summary>
            <param name="message">The message to be returned.</param>
            <exception cref="T:System.InvalidOperationException">The given message is already pooled.</exception>
        </member>
        <member name="P:MessageCommunicator.MessagePool.CountCachedMessages">
            <summary>
            Total count of messages within the pool.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.ConcurrentObjectPool`1">
            <summary>
            Helper class for reusing objects.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.DelegateMessageReceiveHandler">
            <summary>
            Helper class for <see cref="T:MessageCommunicator.MessageChannel"/>.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.DelegateMessageReceiveHandler.#ctor(System.Action{MessageCommunicator.Message})">
            <summary>
            Builds an <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> implementation based on the given delegate.
            </summary>
            <param name="receiveHandler">The delegate to be called on received messages.</param>
        </member>
        <member name="M:MessageCommunicator.Util.DelegateMessageReceiveHandler.OnMessageReceived(MessageCommunicator.Message)">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.Util.TcpCommunicatorUtil.GetCountOfDigits(System.Int32)">
            <summary>
            Gets the total count of digits for the given integer.
            </summary>
        </member>
        <member name="T:MessageCommunicator.Util.IArgSet">
            <summary>
            Specifies an interface for types that act as a set of formatting arguments.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.IArgSet.Count">
            <summary>
            The number of arguments in the set.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.IArgSet.Format(MessageCommunicator.Util.StringBuffer,System.Int32,MessageCommunicator.Util.StringView)">
            <summary>
            Format one of the arguments in the set into the given string buffer.
            </summary>
            <param name="buffer">The buffer to which to append the argument.</param>
            <param name="index">The index of the argument to format.</param>
            <param name="format">A specifier indicating how the argument should be formatted.</param>
        </member>
        <member name="T:MessageCommunicator.Util.IStringFormattable">
            <summary>
            Defines an interface for types that can be formatted into a string buffer.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.IStringFormattable.Format(MessageCommunicator.Util.StringBuffer,MessageCommunicator.Util.StringView)">
            <summary>
            Format the current instance into the given string buffer.
            </summary>
            <param name="buffer">The buffer to which to append.</param>
            <param name="format">A specifier indicating how the argument should be formatted.</param>
        </member>
        <member name="T:MessageCommunicator.Util.StringBuffer">
            <summary>
            A low-allocation version of the built-in <see cref="T:System.Text.StringBuilder"/> type.
            </summary>
            <summary>
            A low-allocation version of the built-in <see cref="T:System.Text.StringBuilder"/> type.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.StringBuffer.Count">
            <summary>
            The number of characters in the buffer.
            </summary>
        </member>
        <member name="P:MessageCommunicator.Util.StringBuffer.Culture">
            <summary>
            The culture used to format string data.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MessageCommunicator.Util.StringBuffer"/> class.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MessageCommunicator.Util.StringBuffer"/> class.
            </summary>
            <param name="capacity">The initial size of the string buffer.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.SetCustomFormatter``1(System.Action{MessageCommunicator.Util.StringBuffer,``0,MessageCommunicator.Util.StringView})">
            <summary>
            Sets a custom formatter to use when converting instances of a given type to a string.
            </summary>
            <typeparam name="T">The type for which to set the formatter.</typeparam>
            <param name="formatter">A delegate that will be called to format instances of the specified type.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Clear">
            <summary>
            Clears the buffer.
            </summary>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Int32,System.Char[],System.Int32,System.Int32)">
            <summary>
            Copies the contents of the buffer to the given array.
            </summary>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="destination">The destination array.</param>
            <param name="destinationIndex">The index within the destination array to which to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Char*,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the buffer to the given array.
            </summary>
            <param name="dest">A pointer to the destination array.</param>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.CopyTo(System.Byte*,System.Int32,System.Int32,System.Text.Encoding)">
            <summary>
            Copies the contents of the buffer to the given byte array.
            </summary>
            <param name="dest">A pointer to the destination byte array.</param>
            <param name="sourceIndex">The index within the buffer to begin copying.</param>
            <param name="count">The number of characters to copy.</param>
            <param name="encoding">The encoding to use to convert characters to bytes.</param>
            <returns>The number of bytes written to the destination.</returns>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.ToString">
            <summary>
            Converts the buffer to a string instance.
            </summary>
            <returns>A new string representing the characters currently in the buffer.</returns>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char)">
            <summary>
            Appends a character to the current buffer.
            </summary>
            <param name="c">The character to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char,System.Int32)">
            <summary>
            Appends a character to the current buffer several times.
            </summary>
            <param name="c">The character to append.</param>
            <param name="count">The number of times to append the character.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.String)">
            <summary>
            Appends the specified string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.String,System.Int32,System.Int32)">
            <summary>
            Appends a string subset to the current buffer.
            </summary>
            <param name="value">The string to append.</param>
            <param name="startIndex">The starting index within the string to begin reading characters.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char[],System.Int32,System.Int32)">
            <summary>
            Appends an array of characters to the current buffer.
            </summary>
            <param name="values">The characters to append.</param>
            <param name="startIndex">The starting index within the array to begin reading characters.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Char*,System.Int32)">
            <summary>
            Appends an array of characters to the current buffer.
            </summary>
            <param name="str">A pointer to the array of characters to append.</param>
            <param name="count">The number of characters to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Boolean)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.SByte,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Byte,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int16,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt16,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int32,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt32,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Int64,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.UInt64,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Single,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Double,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Append(System.Decimal,MessageCommunicator.Util.StringView)">
            <summary>
            Appends the specified value as a string to the current buffer.
            </summary>
            <param name="value">The value to append.</param>
            <param name="format">A format specifier indicating how to convert <paramref name="value"/> to a string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendArgSet``1(System.String,``0@)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance.
            Each format item is replaced by the string representation of a single argument.
            </summary>
            <typeparam name="T">The type of argument set being formatted.</typeparam>
            <param name="format">A composite format string.</param>
            <param name="args">The set of args to insert into the format string.</param>
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``1(System.String,``0)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``1(System.String,``0)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``2(System.String,``0,``1)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``2(System.String,``0,``1)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``3(System.String,``0,``1,``2)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``3(System.String,``0,``1,``2)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``4(System.String,``0,``1,``2,``3)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``4(System.String,``0,``1,``2,``3)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``5(System.String,``0,``1,``2,``3,``4)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``6(System.String,``0,``1,``2,``3,``4,``5)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``7(System.String,``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.AppendFormat``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Appends the string returned by processing a composite format string, which contains zero or more format items, to this instance. Each format item is replaced by the string representation of a single argument.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>
            <param name="arg7">A value to format.</param>   
        </member>
        <member name="M:MessageCommunicator.Util.StringBuffer.Format``8(System.String,``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Converts the value of objects to strings based on the formats specified and inserts them into another string.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="arg0">A value to format.</param>
            <param name="arg1">A value to format.</param>
            <param name="arg2">A value to format.</param>
            <param name="arg3">A value to format.</param>
            <param name="arg4">A value to format.</param>
            <param name="arg5">A value to format.</param>
            <param name="arg6">A value to format.</param>
            <param name="arg7">A value to format.</param>   
        </member>
        <member name="T:MessageCommunicator.FixedReconnectWaitTimeGetter">
            <summary>
            This class is responsible to get the wait time before reconnect when a connection on a <see cref="T:MessageCommunicator.IByteStreamHandler"/> got lost.
            In this implementation we use always the same wait time.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedReconnectWaitTimeGetter.#ctor(System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedReconnectWaitTimeGetter"/>.
            </summary>
            <param name="fixedWaitTime">The time to be waited before each reconnect.</param>
        </member>
        <member name="M:MessageCommunicator.FixedReconnectWaitTimeGetter.GetWaitTime(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.ReconnectWaitTimeGetter">
            <summary>
            This class is responsible to get the wait time before reconnect when a connection on a <see cref="T:MessageCommunicator.IByteStreamHandler"/> got lost.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ReconnectWaitTimeGetter.GetWaitTime(System.Int32)">
            <summary>
            Gets the next wait time before trying to reconnect.
            </summary>
            <param name="errorCountSinceLastConnect">Total count of connection errors since last established connection.</param>
        </member>
        <member name="T:MessageCommunicator.ByteStreamHandler">
            <summary>
            A <see cref="T:MessageCommunicator.ByteStreamHandler"/> is responsible for sending / receiving bytes to the connected partner. It also manages the connection, triggers reconnect after
            disconnect and so on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.State">
            <summary>
            Gets the current state of the connection.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.IsRunning">
            <summary>
            Returns true if this instance is in running state, otherwise false.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.LocalEndpointDescription">
            <summary>
            Gets a short description of the local endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.RemoteEndpointDescription">
            <summary>
            Gets a short description of the remote endpoint when started / connected.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.Logger">
            <summary>
            Gets or sets a custom logger. If set, this delegate will be called with all relevant events.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.MessageRecognizer">
            <summary>
            The <see cref="T:MessageCommunicator.IMessageRecognizer"/> to which to forward all received bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.LastConnectTimestampUtc">
            <summary>
            Gets the timestamp from the last successful connection (utc).
            </summary>
        </member>
        <member name="P:MessageCommunicator.ByteStreamHandler.LastReceivedDataBlockTimestampUtc">
            <summary>
            Gets the timestamp from the last successfully received data block (utc).
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.StartAsync">
            <summary>
            Start this instance.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.StopAsync">
            <summary>
            Stops this instance.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.WaitForConnectionAsync(System.Threading.CancellationToken)">
            <summary>
            Waits for successful connection with a partner.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.Log(MessageCommunicator.LoggingMessageType,System.String,System.String,System.Exception)">
            <summary>
            Calls current logger with the given message.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandler.SendAsync(System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.ByteStreamHandlerSettings">
            <summary>
            A container for all settings regarding a <see cref="T:MessageCommunicator.ByteStreamHandler"/> object.
            </summary>
        </member>
        <member name="M:MessageCommunicator.ByteStreamHandlerSettings.CreateByteStreamHandler">
            <summary>
            The factory method for a <see cref="T:MessageCommunicator.ByteStreamHandler"/> implementation.
            </summary>
            <returns>A new <see cref="T:MessageCommunicator.ByteStreamHandler"/> with configuration from this instance.</returns>
        </member>
        <member name="T:MessageCommunicator.IByteStreamHandler">
            <summary>
            A <see cref="T:MessageCommunicator.IByteStreamHandler"/> is responsible for sending / receiving bytes to the connected partner. It also manages the connection, triggers reconnect after
            disconnect and so on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.IByteStreamHandler.MessageRecognizer">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IMessageRecognizer"/> which gets notified when we received bytes from the connected partner.
            </summary>
        </member>
        <member name="M:MessageCommunicator.IByteStreamHandler.SendAsync(System.ArraySegment{System.Byte})">
            <summary>
            Sends the given bytes to the connected partner.
            </summary>
            <param name="buffer">The bytes to be sent.</param>
            <returns>True if sending was successful, otherwise false.</returns>
        </member>
        <member name="T:MessageCommunicator.TcpActiveByteStreamHandler">
            <summary>
            This <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation sends/receives bytes over a TCP socket. This implementation connects defined port on a
            defined <see cref="T:System.Net.IPAddress"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.RemoteHost">
            <summary>
            Gets the name er ip address of the remote host.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.RemoteIPAddress">
            <summary>
            Gets the remote ip address.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.RemotePort">
            <summary>
            Gets the remote port.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandler.State">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.#ctor(System.String,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandler"/> instance.
            </summary>
            <param name="remoteHost">The dns name or string encoded ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="T:MessageCommunicator.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
            <param name="receiveTimeout">Connection will be closed when we don't receive anything in this period of time.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandler"/> instance.
            </summary>
            <param name="remoteIP">The ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="T:MessageCommunicator.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
            <param name="receiveTimeout">Connection will be closed when we don't receive anything in this period of time.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.StartInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.StopInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandler.GetCurrentSendSocket">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.TcpActiveByteStreamHandlerSettings">
            <summary>
            This class provides all relevant settings for <see cref="T:MessageCommunicator.TcpActiveByteStreamHandler"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.RemoteHost">
            <summary>
            Gets or sets the hostname or ip address of the remote host.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.RemoteIP">
            <summary>
            Gets or sets the <see cref="T:System.Net.IPAddress"/> of the remote host.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.RemotePort">
            <summary>
            Gets or sets the remote port.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> instance.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReceiveTimeout">
            <summary>
            Connection will be closed when we don't receive anything in this period of time.
            </summary>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandlerSettings.#ctor(System.String,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter,System.Int32)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandlerSettings"/> instance.
            </summary>
            <param name="remoteHost">The dns name or string encoded ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
            <param name="receiveTimeoutMS">Connection will be closed when we don't receive anything in this period of time.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandlerSettings.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter,System.Int32)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpActiveByteStreamHandlerSettings"/> instance.
            </summary>
            <param name="remoteIP">The ip address of the remote host.</param>
            <param name="remotePort">The remote port.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="P:MessageCommunicator.TcpActiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
            <param name="receiveTimeoutMS">Connection will be closed when we don't receive anything in this period of time.</param>
        </member>
        <member name="M:MessageCommunicator.TcpActiveByteStreamHandlerSettings.CreateByteStreamHandler">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.TcpByteStreamHandler">
            <summary>
            This <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation sends/receives bytes over a TCP socket.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.ReconnectWaitTimeGetter">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.TcpByteStreamHandler.ReconnectWaitTimeGetter"/> which controls the wait time before reconnect after lost connections.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.RemoteEndpointDescription">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.LocalEndpointDescription">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.ReceiveBufferSize">
            <summary>
            Gets or sets the size of the receive buffer.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.ReceiveTimeout">
            <summary>
            Connection will be closed when we don't receive anything in this period of time.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.LastConnectTimestampUtc">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpByteStreamHandler.LastReceivedDataBlockTimestampUtc">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.#ctor(MessageCommunicator.ReconnectWaitTimeGetter,System.TimeSpan)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.TcpByteStreamHandler"/>.
            </summary>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.WaitByReconnectWaitTimeAsync(System.Int32)">
            <summary>
            A helper method
            </summary>
            <param name="errorCountSinceLastConnect"></param>
            <returns></returns>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.SendAsync(System.ArraySegment{System.Byte})">
            <summary>
            Tries to send the given message to the currently connected partner
            </summary>
            <param name="buffer">The bytes to be sent</param>
            <returns>True when sending was successful</returns>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.GetCurrentSendSocket">
            <summary>
            Gets the current <see cref="T:System.Net.Sockets.TcpClient"/> object for sending.
            This method returns null when this <see cref="T:MessageCommunicator.IByteStreamHandler"/> is not connected to a remote partner.
            </summary>
            <returns>The <see cref="T:System.Net.Sockets.TcpClient"/> object for sending</returns>
        </member>
        <member name="M:MessageCommunicator.TcpByteStreamHandler.RunReceiveLoopAsync(System.Net.Sockets.TcpClient,System.Net.IPEndPoint,System.Net.IPEndPoint,System.Threading.CancellationToken)">
            <summary>
            Internal method which reacts on incoming bytes on the currently active tcp client connection.
            Only one of this connection is active at one time.
            </summary>
        </member>
        <member name="T:MessageCommunicator.TcpPassiveByteStreamHandler">
            <summary>
            This <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation sends/receives bytes over a TCP socket. This implementation listens on a defined port and waits for
            an incoming connection.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.ListeningIPAddress">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> this instance is listening on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.ListeningPort">
            <summary>
            Gets the configured listening port.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.ActualListeningPort">
            <summary>
            Gets the true listening port in case ListeningPort is set to 0.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.IsRunning">
            <inheritdoc />
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandler.State">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter,System.TimeSpan)">
            <summary>
            Create a new <see cref="T:MessageCommunicator.TcpPassiveByteStreamHandler"/> instance.
            </summary>
            <param name="listeningIPAddress">The <see cref="T:System.Net.IPAddress"/> this instance should listen on.</param>
            <param name="listeningPort">The port his instance should listen on. Pass 0 here if the OS should decide which port to use.</param>
            <param name="reconnectWaitTimeGetter">The <see cref="T:MessageCommunicator.ReconnectWaitTimeGetter"/> which generates wait times after broke connection and before reconnect.</param>
            <param name="receiveTimeout">Connection will be closed when we don't receive anything in this period of time.</param>
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.StartInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.StopInternalAsync">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandler.GetCurrentSendSocket">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.TcpPassiveByteStreamHandlerSettings">
            <summary>
            This class provides all relevant settings for <see cref="T:MessageCommunicator.TcpPassiveByteStreamHandler"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ListeningIPAddress">
            <summary>
            Gets or sets the <see cref="T:System.Net.IPAddress"/> to listening on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ListeningPort">
            <summary>
            Gets or sets the port to listen on.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ReconnectWaitTimeGetter">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"/> instance.
            </summary>
        </member>
        <member name="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ReceiveTimeout">
            <summary>
            Connection will be closed when we don't receive anything in this period of time.
            </summary>
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.#ctor(System.Net.IPAddress,System.UInt16,MessageCommunicator.ReconnectWaitTimeGetter,System.Int32)">
            <summary>
            Create a new <see cref="T:MessageCommunicator.TcpPassiveByteStreamHandler"/> instance.
            </summary>
            <param name="listeningIPAddress">The <see cref="T:System.Net.IPAddress"/> to listen on.</param>
            <param name="listeningPort">The port to listen on. Pass 0 here if the OS should decide which port to use.</param>
            <param name="reconnectWaitTimeGetter">The <exception cref="P:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.ReconnectWaitTimeGetter"> which generates wait times after broke connection and before reconnect.</exception></param>
            <param name="receiveTimeoutMS">Connection will be closed when we don't receive anything in this period of time.</param>
        </member>
        <member name="M:MessageCommunicator.TcpPassiveByteStreamHandlerSettings.CreateByteStreamHandler">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.MessageCommunicatorExtensions.GetCharCount(System.Text.Decoder,System.ArraySegment{System.Byte})">
            <summary>
            Gets the total count of characters in the given <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <param name="decoder">The <see cref="T:System.Text.Decoder"/> object which is created by an <see cref="T:System.Text.Encoding"/>.</param>
            <param name="arraySegment">The <see cref="T:System.ArraySegment`1"/> referencing all relevant bytes.</param>
            <returns>Total count of characters inside given buffer.</returns>
        </member>
        <member name="M:MessageCommunicator.MessageCommunicatorExtensions.GetChars(System.Text.Decoder,System.ArraySegment{System.Byte},System.ArraySegment{System.Char})">
            <summary>
            Parses all characters in the given <see cref="T:System.ArraySegment`1"/>.
            </summary>
            <param name="decoder">The <see cref="T:System.Text.Decoder"/> object which is created by an <see cref="T:System.Text.Encoding"/>.</param>
            <param name="source">The <see cref="T:System.ArraySegment`1"/> referencing all relevant bytes.</param>
            <param name="target">The <see cref="T:System.ArraySegment`1"/> referencing to the target character buffer.</param>
            <returns>Total count of characters parsed.</returns>
        </member>
        <member name="T:MessageCommunicator.IMessageRecognizer">
            <summary>
            A <see cref="T:MessageCommunicator.IMessageRecognizer"/> is responsible to recognize incoming messages and for formatting
            outgoing messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.IMessageRecognizer.ByteStreamHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IByteStreamHandler"/> which will be called inside the send method.
            </summary>
        </member>
        <member name="M:MessageCommunicator.IMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <summary>
            Notifies received bytes.
            Be careful, this method is called from the receive event of the <see cref="T:MessageCommunicator.TcpByteStreamHandler"/> loop.
            Ensure that you block the calling thread as short as possible.
            </summary>
            <param name="isNewConnection">This flag is set to true when the given bytes are the first ones from a new connection. Typically this triggers receive buffer cleanup before processing received bytes.</param>
            <param name="receivedBytes">A span containing all received bytes.</param>
        </member>
        <member name="T:MessageCommunicator.MessageRecognitionException">
            <summary>
            This exception type is thrown during message recognition in an <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.
            </summary>
        </member>
        <member name="T:MessageCommunicator.MessageRecognizer">
            <summary>
            A <see cref="T:MessageCommunicator.MessageRecognizer"/> is responsible to recognize incoming messages and for formatting
            outgoing messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageRecognizer.ByteStreamHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IByteStreamHandler"/> implementation to which to forward messages to be sent.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageRecognizer.ReceiveHandler">
            <summary>
            Gets or sets the <see cref="T:MessageCommunicator.IMessageReceiveHandler"/> implementation to which to forward all recognized messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageRecognizer.Logger">
            <summary>
            Gets or sets a custom logger. If set, this delegate will be called with all relevant events.
            </summary>
        </member>
        <member name="P:MessageCommunicator.MessageRecognizer.LastReceivedTimestampUtc">
            <summary>
            Gets the timestamp in UTC when we've received the last <see cref="T:MessageCommunicator.Message"/>.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizer.SendAsync(System.ReadOnlySpan{System.Char})">
            <summary>
            Sends the given message to the partner.
            </summary>
            <param name="rawMessage">The message to be sent.</param>
            <returns>True if sending was successful, otherwise false.</returns>
            <exception cref="T:System.ArgumentException">Invalid message.</exception>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.MessageRecognizer.NotifyRecognizedMessage(System.ReadOnlySpan{System.Char})">
            <summary>
            This method builds a <see cref="T:MessageCommunicator.Message"/> out of given received characters and forwards it to the <see cref="T:MessageCommunicator.IMessageReceiveHandler"/>.
            </summary>
            <param name="receivedChars">The characters which we received from the partner.</param>
        </member>
        <member name="T:MessageCommunicator.MessageRecognizerSettings">
            <summary>
            Encapsulates all settings for an <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.
            </summary>
        </member>
        <member name="M:MessageCommunicator.MessageRecognizerSettings.CreateMessageRecognizer">
            <summary>
            Factory method which creates an <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.
            </summary>
            <returns>The created <see cref="T:MessageCommunicator.IMessageRecognizer"/> implementation.</returns>
        </member>
        <member name="T:MessageCommunicator.DefaultMessageRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implements a custom messages style of the MessageCommunicator
            project. 
            </summary>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.DefaultMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.DefaultMessageRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.DefaultMessageRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.DefaultMessageRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.DefaultMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizerSettings.#ctor(System.Text.Encoding)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.DefaultMessageRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.DefaultMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
        </member>
        <member name="M:MessageCommunicator.DefaultMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.EndSymbolsMessageRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implementation recognizes messages with one or more end symbols.
            </summary>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizer.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.EndSymbolsMessageRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.EndSymbols">
            <summary>
            Gets or sets the end symbols of received/sent messages.
            </summary>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizerSettings.#ctor(System.Text.Encoding,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.EndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.EndSymbolsMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implementation recognizes messages with one or more end symbols and
            a fixed length.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer.#ctor(System.Text.Encoding,System.String,System.Int32,System.Char)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
            <param name="lengthIncludingEndSymbols">Total length of received/sent messages.</param>
            <param name="fillSymbol">Fill symbol for messages shorter than the fixed length.</param>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.EndSymbols">
            <summary>
            Gets or sets the end symbols of received/sent messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.LengthIncludingEndSymbols">
            <summary>
            Gets or sets the total length of received/sent messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.FillSymbol">
            <summary>
            Gets or sets the fill symbol for messages shorter than the fixed length.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.#ctor(System.Text.Encoding,System.String,System.Int32,System.Char)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
            <param name="lengthIncludingEndSymbols">Total length of received/sent messages.</param>
            <param name="fillSymbol">Fill symbol for messages shorter than the fixed length.</param>
        </member>
        <member name="M:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.FixedLengthMessageRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implementation recognizes messages with a fixed length.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedLengthMessageRecognizer.#ctor(System.Text.Encoding,System.Int32,System.Char)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="length">Total length of received/sent messages.</param>
            <param name="fillSymbol">Fill symbol for messages shorter than the fixed length.</param>
        </member>
        <member name="M:MessageCommunicator.FixedLengthMessageRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.FixedLengthMessageRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.FixedLengthMessageRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.FixedLengthMessageRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthMessageRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.FixedLengthMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthMessageRecognizerSettings.Length">
            <summary>
            Gets or sets the total length of received/sent messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.FixedLengthMessageRecognizerSettings.FillSymbol">
            <summary>
            Gets or sets the fill symbol for messages shorter than the fixed length.
            </summary>
        </member>
        <member name="M:MessageCommunicator.FixedLengthMessageRecognizerSettings.#ctor(System.Text.Encoding,System.Int32,System.Char)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.FixedLengthAndEndSymbolsMessageRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.FixedLengthMessageRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="length">Total length of received/sent messages.</param>
            <param name="fillSymbol">Fill symbol for messages shorter than the fixed length.</param>
        </member>
        <member name="M:MessageCommunicator.FixedLengthMessageRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.StartAndEndSymbolsRecognizer">
            <summary>
            This <see cref="T:MessageCommunicator.MessageRecognizer"/> implementation recognizes messages with one or more start and end symbols.
            </summary>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.#ctor(System.Text.Encoding,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.EndSymbolsMessageRecognizer"/> instance.
            </summary>
            <param name="encoding">The <see cref="T:System.Text.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="startSymbols">The start symbols of received/sent messages.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.SendInternalAsync(MessageCommunicator.IByteStreamHandler,System.ReadOnlySpan{System.Char})">
            <inheritdoc />
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizer.OnReceivedBytes(System.Boolean,System.ArraySegment{System.Byte})">
            <inheritdoc />
        </member>
        <member name="T:MessageCommunicator.StartAndEndSymbolsRecognizerSettings">
            <summary>
            This class provides all settings for <see cref="T:MessageCommunicator.StartAndEndSymbolsRecognizer"/>.
            </summary>
        </member>
        <member name="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.Encoding">
            <summary>
            Gets or sets the <see cref="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.
            </summary>
        </member>
        <member name="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.StartSymbols">
            <summary>
            Gets or sets the start symbols of received/sent messages.
            </summary>
        </member>
        <member name="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.EndSymbols">
            <summary>
            Gets or sets the end symbols of received/sent messages.
            </summary>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.#ctor(System.Text.Encoding,System.String,System.String)">
            <summary>
            Creates a new <see cref="T:MessageCommunicator.StartAndEndSymbolsRecognizerSettings"/> instance.
            </summary>
            <param name="encoding">The <see cref="P:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.Encoding"/> to be used when convert characters to/from bytes.</param>
            <param name="startSymbols">The start symbols of received/sent messages.</param>
            <param name="endSymbols">The end symbols of received/sent messages.</param>
        </member>
        <member name="M:MessageCommunicator.StartAndEndSymbolsRecognizerSettings.CreateMessageRecognizer">
            <inheritdoc />
        </member>
        <member name="T:Light.GuardClauses.Check">
            <summary>
            The <see cref = "T:Light.GuardClauses.Check"/> class provides access to all assertions of Light.GuardClauses.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNull``1(``0,System.String,System.String)">
            <summary>
            Ensures that the specified object reference is not null, or otherwise throws an <see cref = "T:System.ArgumentNullException"/>.
            </summary>
            <param name = "parameter">The object reference to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNull``1(``0,System.Func{System.Exception})">
            <summary>
            Ensures that the specified object reference is not null, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The reference to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeDefault``1(``0,System.String,System.String)">
            <summary>
            Ensures that the specified parameter is not the default value, or otherwise throws an <see cref = "T:System.ArgumentNullException"/>
            for reference types, or an <see cref = "T:Light.GuardClauses.Exceptions.ArgumentDefaultException"/> for value types.
            </summary>
            <param name = "parameter">The value to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is a reference type and null.</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.ArgumentDefaultException">Thrown when <paramref name = "parameter"/> is a value type and the default value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeDefault``1(``0,System.Func{System.Exception})">
            <summary>
            Ensures that the specified parameter is not the default value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The value to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is the default value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullReference``1(``0,System.String,System.String)">
            <summary>
            Ensures that the specified parameter is not null when <typeparamref name = "T"/> is a reference type, or otherwise
            throws an <see cref = "T:System.ArgumentNullException"/>. PLEASE NOTICE: you should only use this assertion in generic contexts,
            use <see cref = "M:Light.GuardClauses.Check.MustNotBeNull``1(``0,System.String,System.String)"/> by default.
            </summary>
            <param name = "parameter">The value to be checked for null.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <typeparamref name = "T"/> is a reference type and <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullReference``1(``0,System.Func{System.Exception})">
            <summary>
            Ensures that the specified parameter is not null when <typeparamref name = "T"/> is a reference type, or otherwise
            throws your custom exception. PLEASE NOTICE: you should only use this assertion in generic contexts,
            use <see cref = "M:Light.GuardClauses.Check.MustNotBeNull``1(``0,System.Func{System.Exception})"/> by default.
            </summary>
            <param name = "parameter">The value to be checked for null.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <typeparamref name = "T"/> is a reference type and <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeOfType``1(System.Object,System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> can be cast to <typeparamref name = "T"/> and returns the cast value, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.TypeCastException"/>.
            </summary>
            <param name = "parameter">The value to be cast.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.TypeCastException">Thrown when <paramref name = "parameter"/> cannot be cast to <typeparamref name = "T"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeOfType``1(System.Object,System.Func{System.Object,System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> can be cast to <typeparamref name = "T"/> and returns the cast value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The value to be cast.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. The <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> cannot be cast to <typeparamref name = "T"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsValidEnumValue``1(``0)">
            <summary>
            Checks if the specified value is a valid enum value of its type. This is true when the specified value
            is one of the constants defined in the enum, or a valid flags combination when the enum type is marked
            with the <see cref = "T:System.FlagsAttribute"/>.
            </summary>
            <typeparam name = "T">The type of the enum.</typeparam>
            <param name = "parameter">The enum value to be checked.</param>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeValidEnumValue``1(``0,System.String,System.String)">
            <summary>
            Ensures that the specified enum value is valid, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.EnumValueNotDefinedException"/>. An enum value
            is valid when the specified value is one of the constants defined in the enum, or a valid flags combination when the enum type
            is marked with the <see cref = "T:System.FlagsAttribute"/>.
            </summary>
            <typeparam name = "T">The type of the enum.</typeparam>
            <param name = "parameter">The value to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.EnumValueNotDefinedException">Thrown when <paramref name = "parameter"/> is no valid enum value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeValidEnumValue``1(``0,System.Func{``0,System.Exception})">
            <summary>
            Ensures that the specified enum value is valid, or otherwise throws your custom exception. An enum value
            is valid when the specified value is one of the constants defined in the enum, or a valid flags combination when the enum type
            is marked with the <see cref = "T:System.FlagsAttribute"/>.
            </summary>
            <typeparam name = "T">The type of the enum.</typeparam>
            <param name = "parameter">The value to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. The <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is no valid enum value, or when <typeparamref name = "T"/> is no enum type.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsEmpty(System.Guid)">
            <summary>
            Checks if the specified GUID is an empty one.
            </summary>
            <param name = "parameter">The GUID to be checked.</param>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeEmpty(System.Guid,System.String,System.String)">
            <summary>
            Ensures that the specified GUID is not empty, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.EmptyGuidException"/>.
            </summary>
            <param name = "parameter">The GUID to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.EmptyGuidException">Thrown when <paramref name = "parameter"/> is an empty GUID.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeEmpty(System.Guid,System.Func{System.Exception})">
            <summary>
            Ensures that the specified GUID is not empty, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The GUID to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is an empty GUID.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.InvalidOperation(System.Boolean,System.String)">
            <summary>
            Checks if the specified <paramref name = "condition"/> is true and throws an <see cref = "T:System.InvalidOperationException"/> in this case.
            </summary>
            <param name = "condition">The condition to be checked. The exception is thrown when it is true.</param>
            <param name = "message">The message that will be passed to the <see cref = "T:System.InvalidOperationException"/> (optional).</param>
            <exception cref = "T:System.InvalidOperationException">Thrown when <paramref name = "condition"/> is true.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.InvalidState(System.Boolean,System.String)">
            <summary>
            Checks if the specified <paramref name = "condition"/> is true and throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidStateException"/> in this case.
            </summary>
            <param name = "condition">The condition to be checked. The exception is thrown when it is true.</param>
            <param name = "message">The message that will be passed to the <see cref = "T:Light.GuardClauses.Exceptions.InvalidStateException"/>.</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidStateException">Thrown when <paramref name = "condition"/> is true.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.InvalidArgument(System.Boolean,System.String,System.String)">
            <summary>
            Checks if the specified <paramref name = "condition"/> is true and throws an <see cref = "T:System.ArgumentException"/> in this case.
            </summary>
            <param name = "condition">The condition to be checked. The exception is thrown when it is true.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the <see cref = "T:System.ArgumentException"/> (optional).</param>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "condition"/> is true.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.InvalidArgument(System.Boolean,System.Func{System.Exception})">
            <summary>
            Checks if the specified <paramref name = "condition"/> is true and throws your custom exception in this case.
            </summary>
            <param name = "condition">The condition to be checked. The exception is thrown when it is true.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "condition"/> is true.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.InvalidArgument``1(System.Boolean,``0,System.Func{``0,System.Exception})">
            <summary>
            Checks if the specified <paramref name = "condition"/> is true and throws your custom exception in this case.
            </summary>
            <param name = "condition">The condition to be checked. The exception is thrown when it is true.</param>
            <param name = "parameter">The value that is checked in the <paramref name = "condition"/>. This value is passed to the <paramref name = "exceptionFactory"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. The <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "condition"/> is true.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveValue``1(System.Nullable{``0},System.String,System.String)">
            <summary>
            Ensures that the specified nullable has a value and returns it, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.NullableHasNoValueException"/>.
            </summary>
            <param name = "parameter">The nullable to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.NullableHasNoValueException">Thrown when <paramref name = "parameter"/> has no value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveValue``1(System.Nullable{``0},System.Func{System.Exception})">
            <summary>
            Ensures that the specified nullable has a value and returns it, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The nullable to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception.</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.NullableHasNoValueException">Thrown when <paramref name = "parameter"/> has no value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsSameAs``1(``0,``0)">
            <summary>
            Checks if <paramref name = "parameter"/> and <paramref name = "other"/> point to the same object.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeSameAs``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> and <paramref name = "other"/> do not point to the same object instance, or otherwise
            throws a <see cref = "T:Light.GuardClauses.Exceptions.SameObjectReferenceException"/>.
            </summary>
            <param name = "parameter">The first reference to be checked.</param>
            <param name = "other">The second reference to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SameObjectReferenceException">Thrown when both <paramref name = "parameter"/> and <paramref name = "other"/> point to the same object.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeSameAs``1(``0,``0,System.Func{``0,System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> and <paramref name = "other"/> do not point to the same object instance, or otherwise
            throws your custom exception.
            </summary>
            <param name = "parameter">The first reference to be checked.</param>
            <param name = "other">The second reference to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SameObjectReferenceException">Thrown when both <paramref name = "parameter"/> and <paramref name = "other"/> point to the same object.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> is equal to <paramref name = "other"/> using the default equality comparer, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException"/>.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException">Thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are not equal.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> is equal to <paramref name = "other"/> using the default equality comparer, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are not equal.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> is equal to <paramref name = "other"/> using the specified equality comparer, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException"/>.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "equalityComparer">The equality comparer used for comparing the two values.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException">Thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are not equal.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "equalityComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> is equal to <paramref name = "other"/> using the specified equality comparer, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "equalityComparer">The equality comparer used for comparing the two values.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/>, <paramref name = "other"/>, and <paramref name = "equalityComparer"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are not equal, or when <paramref name = "equalityComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> is not equal to <paramref name = "other"/> using the default equality comparer, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException"/>.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException">Thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are equal.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> is not equal to <paramref name = "other"/> using the default equality comparer, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are equal.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> is not equal to <paramref name = "other"/> using the specified equality comparer, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException"/>.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "equalityComparer">The equality comparer used for comparing the two values.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException">Thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are equal.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "equalityComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Func{``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> is not equal to <paramref name = "other"/> using the specified equality comparer, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first value to be compared.</param>
            <param name = "other">The other value to be compared.</param>
            <param name = "equalityComparer">The equality comparer used for comparing the two values.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/>, <paramref name = "other"/>, and <paramref name = "equalityComparer"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> and <paramref name = "other"/> are equal, or when <paramref name = "equalityComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsApproximately(System.Double,System.Double,System.Double)">
            <summary>
            Checks if the specified value is approximately the same as the other value, using the given tolerance.
            </summary>
            <param name = "value">The first value to be compared.</param>
            <param name = "other">The second value to be compared.</param>
            <param name = "tolerance">The tolerance indicating how much the two values may differ from each other.</param>
            <returns>
            True if <paramref name = "value"/> <paramref name = "other"/> are equal or if their absolute difference
            is smaller than the given <paramref name = "tolerance"/>, otherwise false.
            </returns>
        </member>
        <member name="M:Light.GuardClauses.Check.IsApproximately(System.Double,System.Double)">
            <summary>
            Checks if the specified value is approximately the same as the other value, using the default tolerance of 0.0001.
            </summary>
            <param name = "value">The first value to be compared.</param>
            <param name = "other">The second value to be compared.</param>
            <returns>
            True if <paramref name = "value"/> <paramref name = "other"/> are equal or if their absolute difference
            is smaller than 0.0001, otherwise false.
            </returns>
        </member>
        <member name="M:Light.GuardClauses.Check.IsApproximately(System.Single,System.Single,System.Single)">
            <summary>
            Checks if the specified value is approximately the same as the other value, using the given tolerance.
            </summary>
            <param name = "value">The first value to compare.</param>
            <param name = "other">The second value to compare.</param>
            <param name = "tolerance">The tolerance indicating how much the two values may differ from each other.</param>
            <returns>
            True if <paramref name = "value"/> <paramref name = "other"/> are equal or if their absolute difference
            is smaller than the given <paramref name = "tolerance"/>, otherwise false.
            </returns>
        </member>
        <member name="M:Light.GuardClauses.Check.IsApproximately(System.Single,System.Single)">
            <summary>
            Checks if the specified value is approximately the same as the other value, using the default tolerance of 0.0001f.
            </summary>
            <param name = "value">The first value to be compared.</param>
            <param name = "other">The second value to be compared.</param>
            <returns>
            True if <paramref name = "value"/> <paramref name = "other"/> are equal or if their absolute difference
            is smaller than 0.0001f, otherwise false.
            </returns>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeLessThan``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not less than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than or equal to <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is less than <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeLessThan``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not less than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than or equal to <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is less than <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not less than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than or equal to <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is less than <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeGreaterThanOrEqualTo``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not less than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than or equal to <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is less than <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLessThan``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is less than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is not less than <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLessThan``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is less than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is not less than <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeGreaterThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is less than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is not less than <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeGreaterThanOrEqualTo``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is less than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is not less than <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeGreaterThan``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is greater than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is less than or equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeGreaterThan``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is greater than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is less than or equal to <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeLessThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is greater than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is less than or equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeLessThanOrEqualTo``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is greater than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be less than <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is less than or equal to <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeGreaterThan``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not greater than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than or equal to <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is greater than <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeGreaterThan``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not greater than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than or equal to <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is greater than <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLessThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not greater than the given <paramref name = "other"/> value, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than or equal to <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when the specified <paramref name = "parameter"/> is greater than <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLessThanOrEqualTo``1(``0,``0,System.Func{``0,``0,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> is not greater than the given <paramref name = "other"/> value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "other">The boundary value that must be greater than or equal to <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when the specified <paramref name = "parameter"/> is greater than <paramref name = "other"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsIn``1(``0,Light.GuardClauses.Range{``0})">
            <summary>
            Checks if the value is within the specified range.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "range">The range where <paramref name = "parameter"/> must be in-between.</param>
            <returns>True if the parameter is within the specified range, else false.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsNotIn``1(``0,Light.GuardClauses.Range{``0})">
            <summary>
            Checks if the value is not within the specified range.
            </summary>
            <param name = "parameter">The comparable to be checked.</param>
            <param name = "range">The range where <paramref name = "parameter"/> must not be in-between.</param>
            <returns>True if the parameter is not within the specified range, else false.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeIn``1(``0,Light.GuardClauses.Range{``0},System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> is within the specified range, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name = "T">The type of the parameter to be checked.</typeparam>
            <param name = "parameter">The parameter to be checked.</param>
            <param name = "range">The range where <paramref name = "parameter"/> must be in-between.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "parameter"/> is not within <paramref name = "range"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeIn``1(``0,Light.GuardClauses.Range{``0},System.Func{``0,Light.GuardClauses.Range{``0},System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> is within the specified range, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The parameter to be checked.</param>
            <param name = "range">The range where <paramref name = "parameter"/> must be in-between.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "range"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is not within <paramref name = "range"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeIn``1(``0,Light.GuardClauses.Range{``0},System.String,System.String)">
            <summary>
            Ensures that <paramref name = "parameter"/> is not within the specified range, or otherwise throws an <see cref = "T:System.ArgumentOutOfRangeException"/>.
            </summary>
            <typeparam name = "T">The type of the parameter to be checked.</typeparam>
            <param name = "parameter">The parameter to be checked.</param>
            <param name = "range">The range where <paramref name = "parameter"/> must not be in-between.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "parameter"/> is within <paramref name = "range"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeIn``1(``0,Light.GuardClauses.Range{``0},System.Func{``0,Light.GuardClauses.Range{``0},System.Exception})">
            <summary>
            Ensures that <paramref name = "parameter"/> is not within the specified range, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The parameter to be checked.</param>
            <param name = "range">The range where <paramref name = "parameter"/> must not be in-between.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "range"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is within <paramref name = "range"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeUtc(System.DateTime,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> uses <see cref = "F:System.DateTimeKind.Utc"/>, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException"/>.
            </summary>
            <param name = "parameter">The date time to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException">Thrown when <paramref name = "parameter"/> does not use <see cref = "F:System.DateTimeKind.Utc"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeUtc(System.DateTime,System.Func{System.DateTime,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> uses <see cref = "F:System.DateTimeKind.Utc"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The date time to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not use <see cref = "F:System.DateTimeKind.Utc"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLocal(System.DateTime,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> uses <see cref = "F:System.DateTimeKind.Local"/>, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException"/>.
            </summary>
            <param name = "parameter">The date time to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException">Thrown when <paramref name = "parameter"/> does not use <see cref = "F:System.DateTimeKind.Local"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLocal(System.DateTime,System.Func{System.DateTime,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> uses <see cref = "F:System.DateTimeKind.Local"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The date time to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not use <see cref = "F:System.DateTimeKind.Local"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeUnspecified(System.DateTime,System.String,System.String)">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> uses <see cref = "F:System.DateTimeKind.Unspecified"/>, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException"/>.
            </summary>
            <param name = "parameter">The date time to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException">Thrown when <paramref name = "parameter"/> does not use <see cref = "F:System.DateTimeKind.Unspecified"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeUnspecified(System.DateTime,System.Func{System.DateTime,System.Exception})">
            <summary>
            Ensures that the specified <paramref name = "parameter"/> uses <see cref = "F:System.DateTimeKind.Unspecified"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The date time to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not use <see cref = "F:System.DateTimeKind.Unspecified"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveCount``1(``0,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the collection has the specified number of items, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "count">The number of items the collection must have.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> does not have the specified number of items.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveCount``1(``0,System.Int32,System.Func{``0,System.Int32,System.Exception})">
            <summary>
            Ensures that the collection has the specified number of items, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "count">The number of items the collection must have.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "count"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not have the specified number of items, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsNullOrEmpty(System.Collections.IEnumerable)">
            <summary>
            Checks if the specified collection is null or empty.
            </summary>
            <param name = "collection">The collection to be checked.</param>
            <returns>True if the collection is null or empty, else false.</returns>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullOrEmpty``1(``0,System.String,System.String)">
            <summary>
            Ensures that the collection is not null or empty, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.EmptyCollectionException"/>.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.EmptyCollectionException">Thrown when <paramref name = "parameter"/> has no items.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullOrEmpty``1(``0,System.Func{``0,System.Exception})">
            <summary>
            Ensures that the collection is not null or empty, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception.</param>
            <exception cref = "T:System.Exception">Thrown when <paramref name = "parameter"/> has no items, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustContain``2(``0,``1,System.String,System.String)">
            <summary>
            Ensures that the collection contains the specified item, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.MissingItemException"/>.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "item">The item that must be part of the collection.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.MissingItemException">Thrown when <paramref name = "parameter"/> does not contain <paramref name = "item"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustContain``2(``0,``1,System.Func{``0,``1,System.Exception})">
            <summary>
            Ensures that the collection contains the specified item, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "item">The item that must be part of the collection.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "item"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not contain <paramref name = "item"/>, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotContain``2(``0,``1,System.String,System.String)">
            <summary>
            Ensures that the collection does not contain the specified item, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.ExistingItemException"/>.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "item">The item that must not be part of the collection.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ExistingItemException">Thrown when <paramref name = "parameter"/> contains <paramref name = "item"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotContain``2(``0,``1,System.Func{``0,``1,System.Exception})">
            <summary>
            Ensures that the collection does not contain the specified item, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "item">The item that must not be part of the collection.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "item"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> contains <paramref name = "item"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOneOf``1(``0,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Checks if the given <paramref name = "item"/> is one of the specified <paramref name = "items"/>.
            </summary>
            <param name = "item">The item to be checked.</param>
            <param name = "items">The collection that might contain the <paramref name = "item"/>.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "items"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeOneOf``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Ensures that the value is one of the specified items, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValueIsNotOneOfException"/>.
            </summary>
            <param name = "parameter">The value to be checked.</param>
            <param name = "items">The items that should contain the value.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValueIsNotOneOfException">Thrown when <paramref name = "parameter"/> is not equal to one of the specified <paramref name = "items"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "items"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeOneOf``2(``0,``1,System.Func{``0,``1,System.Exception})">
            <summary>
            Ensures that the value is one of the specified items, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The value to be checked.</param>
            <param name = "items">The items that should contain the value.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "items"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is not equal to one of the specified <paramref name = "items"/>, or when <paramref name = "items"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeOneOf``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Ensures that the value is not one of the specified items, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValueIsOneOfException"/>.
            </summary>
            <param name = "parameter">The value to be checked.</param>
            <param name = "items">The items that must not contain the value.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValueIsOneOfException">Thrown when <paramref name = "parameter"/> is equal to one of the specified <paramref name = "items"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "items"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeOneOf``2(``0,``1,System.Func{``0,``1,System.Exception})">
            <summary>
            Ensures that the value is not one of the specified items, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The value to be checked.</param>
            <param name = "items">The items that must not contain the value.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "items"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is equal to one of the specified <paramref name = "items"/>, or when <paramref name = "items"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveMinimumCount``1(``0,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the collection has at least the specified number of items, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "count">The number of items the collection should have at least.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> does not contain at least the specified number of items.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveMinimumCount``1(``0,System.Int32,System.Func{``0,System.Int32,System.Exception})">
            <summary>
            Ensures that the collection has at least the specified number of items, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "count">The number of items the collection should have at least.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "count"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not contain at least the specified number of items, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLength``1(System.Span{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span has the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length that the span must have.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> does not have the specified length.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLength``1(System.Span{``0},System.Int32,Light.GuardClauses.SpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span has the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length that the span must have.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not have the specified length.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLength``1(System.ReadOnlySpan{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span has the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length that the span must have.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not have the specified length.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLength``1(System.ReadOnlySpan{``0},System.Int32,Light.GuardClauses.ReadOnlySpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span has the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length that the span must have.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not have the specified length.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThan``1(System.Span{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is longer than the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The value that the span must be longer than.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is shorter than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThan``1(System.Span{``0},System.Int32,Light.GuardClauses.SpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is longer than the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be longer than.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is shorter than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThan``1(System.ReadOnlySpan{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is longer than the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The value that the span must be longer than.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is shorter than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThan``1(System.ReadOnlySpan{``0},System.Int32,Light.GuardClauses.ReadOnlySpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is longer than the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be longer than.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is shorter than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThanOrEqualTo``1(System.Span{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is longer than or equal to the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The value that the span must be longer than or equal to.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is shorter than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThanOrEqualTo``1(System.Span{``0},System.Int32,Light.GuardClauses.SpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is longer than or equal to the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The value that the span must be longer than or equal to.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is shorter than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is longer than or equal to the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The value that the span must be longer than or equal to.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is shorter than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,Light.GuardClauses.ReadOnlySpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is longer than or equal to the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The value that the span must be longer than or equal to.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is shorter than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThan``1(System.Span{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is shorter than the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is longer than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThan``1(System.Span{``0},System.Int32,Light.GuardClauses.SpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is shorter than the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is longer than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThan``1(System.ReadOnlySpan{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is shorter than the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is longer than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThan``1(System.ReadOnlySpan{``0},System.Int32,Light.GuardClauses.ReadOnlySpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is shorter than the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is longer than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThanOrEqualTo``1(System.Span{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is shorter than or equal to the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than or equal to.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is longer than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThanOrEqualTo``1(System.Span{``0},System.Int32,Light.GuardClauses.SpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is shorter than or equal to the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than or equal to.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is longer than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,System.String,System.String)">
            <summary>
            Ensures that the span is shorter than or equal to the specified length, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than or equal to.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> is longer than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThanOrEqualTo``1(System.ReadOnlySpan{``0},System.Int32,Light.GuardClauses.ReadOnlySpanExceptionFactory{``0,System.Int32})">
            <summary>
            Ensures that the span is shorter than or equal to the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The span to be checked.</param>
            <param name = "length">The length value that the span must be shorter than or equal to.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to it.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is longer than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveMaximumCount``1(``0,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the collection has at most the specified number of items, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "count">The number of items the collection should have at most.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">Thrown when <paramref name = "parameter"/> does not contain at most the specified number of items.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveMaximumCount``1(``0,System.Int32,System.Func{``0,System.Int32,System.Exception})">
            <summary>
            Ensures that the collection has at most the specified number of items, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The collection to be checked.</param>
            <param name = "count">The number of items the collection should have at most.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "count"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> does not contain at most the specified number of items, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsNullOrEmpty(System.String)">
            <summary>
            Checks if the specified string is null or empty.
            </summary>
            <param name = "string">The string to be checked.</param>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            Ensures that the specified string is not null or empty, or otherwise throws an <see cref = "T:System.ArgumentNullException"/> or <see cref = "T:Light.GuardClauses.Exceptions.EmptyStringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.EmptyStringException">Thrown when <paramref name = "parameter"/> is an empty string.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullOrEmpty(System.String,System.Func{System.String,System.Exception})">
            <summary>
            Ensures that the specified string is not null or empty, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is an empty string or null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsNullOrWhiteSpace(System.String)">
            <summary>
            Checks if the specified string is null, empty, or contains only white space.
            </summary>
            <param name = "string">The string to be checked.</param>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullOrWhiteSpace(System.String,System.String,System.String)">
            <summary>
            Ensures that the specified string is not null, empty, or contains only white space, or otherwise throws an <see cref = "T:System.ArgumentNullException"/>, an <see cref = "T:Light.GuardClauses.Exceptions.EmptyStringException"/>, or a <see cref = "T:Light.GuardClauses.Exceptions.WhiteSpaceStringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.WhiteSpaceStringException">Thrown when <paramref name = "parameter"/> contains only white space.</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.EmptyStringException">Thrown when <paramref name = "parameter"/> is an empty string.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeNullOrWhiteSpace(System.String,System.Func{System.String,System.Exception})">
            <summary>
            Ensures that the specified string is not null, empty, or contains only white space, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null, empty, or contains only white space.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsWhiteSpace(System.Char)">
            <summary>
            Checks if the specified character is a white space character.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Check.IsLetter(System.Char)">
            <summary>
            Checks if the specified character is a letter.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Check.IsLetterOrDigit(System.Char)">
            <summary>
            Checks if the specified character is a letter or digit.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Check.IsDigit(System.Char)">
            <summary>
            Checks if the specified character is a digit.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Ensures that the two strings are equal using the specified <paramref name = "comparisonType"/>, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException"/>.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException">Thrown when <paramref name = "parameter"/> is not equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe(System.String,System.String,System.StringComparison,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the two strings are equal using the specified <paramref name = "comparisonType"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is not equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe(System.String,System.String,Light.GuardClauses.StringComparisonType,System.String,System.String)">
            <summary>
            Ensures that the two strings are equal using the specified <paramref name = "comparisonType"/>, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException"/>.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException">Thrown when <paramref name = "parameter"/> is not equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBe(System.String,System.String,Light.GuardClauses.StringComparisonType,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the two strings are equal using the specified <paramref name = "comparisonType"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is not equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Ensures that the two strings are not equal using the specified <paramref name = "comparisonType"/>, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException"/>.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException">Thrown when <paramref name = "parameter"/> is equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe(System.String,System.String,System.StringComparison,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the two strings are not equal using the specified <paramref name = "comparisonType"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe(System.String,System.String,Light.GuardClauses.StringComparisonType,System.String,System.String)">
            <summary>
            Ensures that the two strings are not equal using the specified <paramref name = "comparisonType"/>, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException"/>.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException">Thrown when <paramref name = "parameter"/> is equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBe(System.String,System.String,Light.GuardClauses.StringComparisonType,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the two strings are not equal using the specified <paramref name = "comparisonType"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The first string to be compared.</param>
            <param name = "other">The second string to be compared.</param>
            <param name = "comparisonType">The enum value specifying how the two strings should be compared.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "other"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is equal to <paramref name = "other"/>.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>
            Ensures that the string matches the specified regular expression, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringDoesNotMatchException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "regex">The regular expression used for pattern matching.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringDoesNotMatchException">Thrown when <paramref name = "parameter"/> does not match the specified regular expression.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "regex"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustMatch(System.String,System.Text.RegularExpressions.Regex,System.Func{System.String,System.Text.RegularExpressions.Regex,System.Exception})">
            <summary>
            Ensures that the string matches the specified regular expression, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "regex">The regular expression used for pattern matching.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "regex"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> does not match the specified regular expression,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "regex"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.Equals(System.String,System.String,Light.GuardClauses.StringComparisonType)">
            <summary>
            Checks if the specified strings are equal, using the given comparison rules.
            </summary>
            <param name = "string">The first string to compare.</param>
            <param name = "value">The second string to compare.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the comparison.</param>
            <returns>True if the two strings are considered equal, else false.</returns>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is no valid enum value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustContain(System.String,System.String,System.String,System.String)">
            <summary>
            Ensures that the string contains the specified substring, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The substring that must be part of <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "parameter"/> does not contain <paramref name = "value"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustContain(System.String,System.String,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the string contains the specified value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The substring that must be part of <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates you custom exception. <paramref name = "parameter"/> and <paramref name = "value"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> does not contain <paramref name = "value"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustContain(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Ensures that the string contains the specified value, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The substring that must be part of <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "parameter"/> does not contain <paramref name = "value"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid <see cref = "T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustContain(System.String,System.String,System.StringComparison,System.Func{System.String,System.String,System.StringComparison,System.Exception})">
            <summary>
            Ensures that the string contains the specified value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The substring that must be part of <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "exceptionFactory">The delegate that creates you custom exception. <paramref name = "parameter"/>, <paramref name = "value"/>, and <paramref name = "comparisonType"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> does not contain <paramref name = "value"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null,
            or when <paramref name = "comparisonType"/> is not a valid value from the <see cref = "T:System.StringComparison"/> enum.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotContain(System.String,System.String,System.String,System.String)">
            <summary>
            Ensures that the string does not contain the specified value, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The string that must not be part of <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "parameter"/> contains <paramref name = "value"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotContain(System.String,System.String,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the string does not contain the specified value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The string that must not be part of <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception (optional). <paramref name = "parameter"/> and <paramref name = "value"/> are passed to this </param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> contains <paramref name = "value"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotContain(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Ensures that the string does not contain the specified value, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The string that must not be part of <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "parameter"/> contains <paramref name = "value"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid <see cref = "T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotContain(System.String,System.String,System.StringComparison,System.Func{System.String,System.String,System.StringComparison,System.Exception})">
            <summary>
            Ensures that the string does not contain the specified value, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The string that must not be part of <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception (optional). <paramref name = "parameter"/>, <paramref name = "value"/>, and <paramref name = "comparisonType"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> contains <paramref name = "value"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null,
            or when <paramref name = "comparisonType"/> is not a valid value of the <see cref = "T:System.StringComparison"/> enum.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            Checks if the string contains the specified value using the given comparison type.
            </summary>
            <param name = "string">The string to be checked.</param>
            <param name = "value">The other string.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>True if <paramref name = "string"/> contains <paramref name = "value"/>, else false.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "string"/> or <paramref name = "value"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid <see cref = "T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsSubstringOf(System.String,System.String)">
            <summary>
            Checks if the string is a substring of the other string.
            </summary>
            <param name = "value">The string to be checked.</param>
            <param name = "other">The other string.</param>
            <returns>True if <paramref name = "value"/> is a substring of <paramref name = "other"/>, else false.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "value"/> or <paramref name = "other"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsSubstringOf(System.String,System.String,System.StringComparison)">
            <summary>
            Checks if the string is a substring of the other string.
            </summary>
            <param name = "value">The string to be checked.</param>
            <param name = "other">The other string.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <returns>True if <paramref name = "value"/> is a substring of <paramref name = "other"/>, else false.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "value"/> or <paramref name = "other"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid <see cref = "T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeSubstringOf(System.String,System.String,System.String,System.String)">
            <summary>
            Ensures that the string is a substring of the specified other string, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must contain <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "value"/> does not contain <paramref name = "parameter"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeSubstringOf(System.String,System.String,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the string is a substring of the specified other string, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must contain <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "value"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "value"/> does not contain <paramref name = "parameter"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeSubstringOf(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Ensures that the string is a substring of the specified other string, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must contain <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "value"/> does not contain <paramref name = "parameter"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid <see cref = "T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeSubstringOf(System.String,System.String,System.StringComparison,System.Func{System.String,System.String,System.StringComparison,System.Exception})">
            <summary>
            Ensures that the string is a substring of the specified other string, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must contain <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/>, <paramref name = "value"/>, and <paramref name = "comparisonType"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "value"/> does not contain <paramref name = "parameter"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null,
            or when <paramref name = "comparisonType"/> is not a valid value of the <see cref = "T:System.StringComparison"/> enum.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeSubstringOf(System.String,System.String,System.String,System.String)">
            <summary>
            Ensures that the string is not a substring of the specified other string, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must not contain <paramref name = "parameter"/>.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "value"/> contains <paramref name = "parameter"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeSubstringOf(System.String,System.String,System.Func{System.String,System.String,System.Exception})">
            <summary>
            Ensures that the string is not a substring of the specified other string, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must not contain <paramref name = "parameter"/>.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "value"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "value"/> contains <paramref name = "parameter"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null.
            </exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeSubstringOf(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Ensures that the string is not a substring of the specified other string, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must not contain <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.SubstringException">Thrown when <paramref name = "value"/> contains <paramref name = "parameter"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> or <paramref name = "value"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid <see cref = "T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustNotBeSubstringOf(System.String,System.String,System.StringComparison,System.Func{System.String,System.String,System.StringComparison,System.Exception})">
            <summary>
            Ensures that the string is not a substring of the specified other string, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "value">The other string that must not contain <paramref name = "parameter"/>.</param>
            <param name = "comparisonType">One of the enumeration values that specifies the rules for the search.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "value"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "value"/> contains <paramref name = "parameter"/>,
            or when <paramref name = "parameter"/> is null,
            or when <paramref name = "value"/> is null.
            </exception>
            <exception cref = "T:System.ArgumentException">Thrown when <paramref name = "comparisonType"/> is not a valid <see cref = "T:System.StringComparison"/> value.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsEmailAddress(System.String)">
            <summary>
            Checks if the specified string is an email address using the default email regular expression
            defined in <see cref = "F:Light.GuardClauses.RegularExpressions.EmailRegex"/>.
            </summary>
            <param name = "emailAddress">The string to be checked if it is an email address.</param>
        </member>
        <member name="M:Light.GuardClauses.Check.IsEmailAddress(System.String,System.Text.RegularExpressions.Regex)">
            <summary>
            Checks if the specified string is an email address using the provided regular expression for validation.
            </summary>
            <param name = "emailAddress">The string to be checked.</param>
            <param name = "emailAddressPattern">The regular expression that determines whether the input string is an email address.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "emailAddressPattern"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeEmailAddress(System.String,System.String,System.String)">
            <summary>
            Ensures that the string is a valid email address using the default email regular expression
            defined in <see cref = "F:Light.GuardClauses.RegularExpressions.EmailRegex"/>, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidEmailAddressException"/>.
            </summary>
            <param name = "parameter">The email address that will be validated.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidEmailAddressException">Thrown when <paramref name = "parameter"/> is no valid email address.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeEmailAddress(System.String,System.Func{System.String,System.Exception})">
            <summary>
            Ensures that the string is a valid email address using the default email regular expression
            defined in <see cref = "F:Light.GuardClauses.RegularExpressions.EmailRegex"/>, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The email address that will be validated.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or no valid email address.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeEmailAddress(System.String,System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>
            Ensures that the string is a valid email address using the provided regular expression,
            or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidEmailAddressException"/>.
            </summary>
            <param name = "parameter">The email address that will be validated.</param>
            <param name = "emailAddressPattern">The regular expression that determines if the input string is a valid email.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidEmailAddressException">Thrown when <paramref name = "parameter"/> is no valid email address.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeEmailAddress(System.String,System.Text.RegularExpressions.Regex,System.Func{System.String,System.Text.RegularExpressions.Regex,System.Exception})">
            <summary>
            Ensures that the string is a valid email address using the provided regular expression,
            or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The email address that will be validated.</param>
            <param name = "emailAddressPattern">The regular expression that determines if the input string is a valid email.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "emailAddressPattern"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or no valid email address.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThan(System.String,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the string is shorter than the specified length, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be shorter than.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringLengthException">Thrown when <paramref name = "parameter"/> has a length greater than or equal to <paramref name = "length"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThan(System.String,System.Int32,System.Func{System.String,System.Int32,System.Exception})">
            <summary>
            Ensures that the string is shorter than the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be shorter than.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or when it has a length greater than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThanOrEqualTo(System.String,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the string is shorter than or equal to the specified length, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be shorter than or equal to.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringLengthException">Thrown when <paramref name = "parameter"/> has a length greater than <paramref name = "length"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeShorterThanOrEqualTo(System.String,System.Int32,System.Func{System.String,System.Int32,System.Exception})">
            <summary>
            Ensures that the string is shorter than or equal to the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be shorter than or equal to.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or when it has a length greater than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLength(System.String,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the string has the specified length, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The asserted length of the string.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringLengthException">Thrown when <paramref name = "parameter"/> has a length different than <paramref name = "length"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLength(System.String,System.Int32,System.Func{System.String,System.Int32,System.Exception})">
            <summary>
            Ensures that the string has the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The asserted length of the string.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or when it has a length different than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThan(System.String,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the string is longer than the specified length, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be longer than.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringLengthException">Thrown when <paramref name = "parameter"/> has a length shorter than or equal to <paramref name = "length"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThan(System.String,System.Int32,System.Func{System.String,System.Int32,System.Exception})">
            <summary>
            Ensures that the string is longer than the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be longer than.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or when it has a length shorter than or equal to <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThanOrEqualTo(System.String,System.Int32,System.String,System.String)">
            <summary>
            Ensures that the string is longer than or equal to the specified length, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be longer than or equal to.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringLengthException">Thrown when <paramref name = "parameter"/> has a length shorter than <paramref name = "length"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeLongerThanOrEqualTo(System.String,System.Int32,System.Func{System.String,System.Int32,System.Exception})">
            <summary>
            Ensures that the string is longer than or equal to the specified length, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "length">The length that the string must be longer than or equal to.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "length"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or when it has a length shorter than <paramref name = "length"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLengthIn(System.String,Light.GuardClauses.Range{System.Int32},System.String,System.String)">
            <summary>
            Ensures that the string's length is within the specified range, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "range">The range where the string's length must be in-between.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringLengthException">Thrown when the length of <paramref name = "parameter"/> is not with the specified <paramref name = "range"/>.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveLengthIn(System.String,Light.GuardClauses.Range{System.Int32},System.Func{System.String,Light.GuardClauses.Range{System.Int32},System.Exception})">
            <summary>
            Ensures that the string's length is within the specified range, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "range">The range where the string's length must be in-between.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> and <paramref name = "range"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is null or its length is not within the specified range.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsNewLine(System.String)">
            <summary>
            Checks if the string is either "\n" or "\r\n". This is done independently of the current value of <see cref = "P:System.Environment.NewLine"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeNewLine(System.String,System.String,System.String)">
            <summary>
            Ensures that the string is either "\n" or "\r\n", or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.StringException"/>. This is done independently of the current value of <see cref = "P:System.Environment.NewLine"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.StringException">Thrown when <paramref name = "parameter"/> is not equal to "\n" or "\r\n".</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeNewLine(System.String,System.Func{System.String,System.Exception})">
            <summary>
            Ensures that the string is either "\n" or "\r\n", or otherwise throws your custom exception. This is done independently of the current value of <see cref = "P:System.Environment.NewLine"/>.
            </summary>
            <param name = "parameter">The string to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is not equal to "\n" or "\r\n".</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)">
            <summary>
            Checks if the two specified types are equivalent. This is true when both types are equal or
            when one type is a constructed generic type and the other type is the corresponding generic type definition.
            </summary>
            <param name = "type">The first type to be checked.</param>
            <param name = "other">The other type to be checked.</param>
            <returns>
            True if both types are null, or if both are equal, or if one type
            is a constructed generic type and the other one is the corresponding generic type definition, else false.
            </returns>
        </member>
        <member name="M:Light.GuardClauses.Check.Implements(System.Type,System.Type)">
            <summary>
            Checks if the type implements the specified interface type. Internally, this method uses <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/>
            so that constructed generic types and their corresponding generic type definitions are regarded as equal.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "interfaceType">The interface type that <paramref name = "type"/> should implement.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "interfaceType"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.Implements(System.Type,System.Type,System.Collections.Generic.IEqualityComparer{System.Type})">
            <summary>
            Checks if the type implements the specified interface type. This overload uses the specified <paramref name = "typeComparer"/>
            to compare the interface types.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "interfaceType">The interface type that <paramref name = "type"/> should implement.</param>
            <param name = "typeComparer">The equality comparer used to compare the interface types.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/>, or <paramref name = "interfaceType"/>, or <paramref name = "typeComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOrImplements(System.Type,System.Type)">
            <summary>
            Checks if the given <paramref name = "type"/> is equal to the specified <paramref name = "otherType"/> or if it implements it. Internally, this
            method uses <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/> so that constructed generic types and their corresponding generic type definitions are regarded as equal.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "otherType">The type that is equivalent to <paramref name = "type"/> or the interface type that <paramref name = "type"/> implements.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "otherType"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOrImplements(System.Type,System.Type,System.Collections.Generic.IEqualityComparer{System.Type})">
            <summary>
            Checks if the given <paramref name = "type"/> is equal to the specified <paramref name = "otherType"/> or if it implements it. This overload uses the specified <paramref name = "typeComparer"/>
            to compare the types.
            </summary>
            ,
            <param name = "type">The type to be checked.</param>
            <param name = "otherType">The type that is equivalent to <paramref name = "type"/> or the interface type that <paramref name = "type"/> implements.</param>
            <param name = "typeComparer">The equality comparer used to compare the interface types.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "otherType"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.DerivesFrom(System.Type,System.Type)">
            <summary>
            Checks if the specified type derives from the other type. Internally, this method uses <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/>
            by default so that constructed generic types and their corresponding generic type definitions are regarded as equal.
            </summary>
            <param name = "type">The type info to be checked.</param>
            <param name = "baseClass">The base class that <paramref name = "type"/> should derive from.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "baseClass"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.DerivesFrom(System.Type,System.Type,System.Collections.Generic.IEqualityComparer{System.Type})">
            <summary>
            Checks if the specified type derives from the other type. This overload uses the specified <paramref name = "typeComparer"/>
            to compare the types.
            </summary>
            <param name = "type">The type info to be checked.</param>
            <param name = "baseClass">The base class that <paramref name = "type"/> should derive from.</param>
            <param name = "typeComparer">The equality comparer used to compare the types.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/>, or <paramref name = "baseClass"/>, or <paramref name = "typeComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOrDerivesFrom(System.Type,System.Type)">
            <summary>
            Checks if the given <paramref name = "type"/> is equal to the specified <paramref name = "otherType"/> or if it derives from it. Internally, this
            method uses <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/> so that constructed generic types and their corresponding generic type definitions are regarded as equal.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "otherType">The type that is equivalent to <paramref name = "type"/> or the base class type where <paramref name = "type"/> derives from.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "otherType"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOrDerivesFrom(System.Type,System.Type,System.Collections.Generic.IEqualityComparer{System.Type})">
            <summary>
            Checks if the given <paramref name = "type"/> is equal to the specified <paramref name = "otherType"/> or if it derives from it. This overload uses the specified <paramref name = "typeComparer"/>
            to compare the types.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "otherType">The type that is equivalent to <paramref name = "type"/> or the base class type where <paramref name = "type"/> derives from.</param>
            <param name = "typeComparer">The equality comparer used to compare the types.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/>, or <paramref name = "otherType"/>, or <paramref name = "typeComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.InheritsFrom(System.Type,System.Type)">
            <summary>
            Checks if the given type derives from the specified base class or interface type. Internally, this method uses <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/>
            so that constructed generic types and their corresponding generic type definitions are regarded as equal.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "baseClassOrInterfaceType">The type describing an interface or base class that <paramref name = "type"/> should derive from or implement.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "baseClassOrInterfaceType"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.InheritsFrom(System.Type,System.Type,System.Collections.Generic.IEqualityComparer{System.Type})">
            <summary>
            Checks if the given type derives from the specified base class or interface type. This overload uses the specified <paramref name = "typeComparer"/>
            to compare the types.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "baseClassOrInterfaceType">The type describing an interface or base class that <paramref name = "type"/> should derive from or implement.</param>
            <param name = "typeComparer">The equality comparer used to compare the types.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/>, or <paramref name = "baseClassOrInterfaceType"/>, or <paramref name = "typeComparer"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOrInheritsFrom(System.Type,System.Type)">
            <summary>
            Checks if the given <paramref name = "type"/> is equal to the specified <paramref name = "otherType"/> or if it derives from it or implements it.
            Internally, this method uses <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/> so that constructed generic types and their corresponding generic type definitions
            are regarded as equal.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "otherType">The type that is equivalent to <paramref name = "type"/> or the base class type where <paramref name = "type"/> derives from.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "otherType"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOrInheritsFrom(System.Type,System.Type,System.Collections.Generic.IEqualityComparer{System.Type})">
            <summary>
            Checks if the given <paramref name = "type"/> is equal to the specified <paramref name = "otherType"/> or if it derives from it or implements it.
            This overload uses the specified <paramref name = "typeComparer"/> to compare the types.
            </summary>
            <param name = "type">The type to be checked.</param>
            <param name = "otherType">The type that is equivalent to <paramref name = "type"/> or the base class type where <paramref name = "type"/> derives from.</param>
            <param name = "typeComparer">The equality comparer used to compare the types.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> or <paramref name = "otherType"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.IsOpenConstructedGenericType(System.Type)">
            <summary>
            Checks if the given <paramref name = "type"/> is a generic type that has open generic parameters,
            but is no generic type definition.
            </summary>
            <param name = "type">The type to be checked.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "type"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeAbsoluteUri(System.Uri,System.String,System.String)">
            <summary>
            Ensures that the specified URI is an absolute one, or otherwise throws a <see cref = "T:Light.GuardClauses.Exceptions.RelativeUriException"/>.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.RelativeUriException">Thrown when <paramref name = "parameter"/> is not an absolute URI.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeAbsoluteUri(System.Uri,System.Func{System.Uri,System.Exception})">
            <summary>
            Ensures that the specified URI is an absolute one, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates the exception to be thrown. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is not an absolute URI, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeRelativeUri(System.Uri,System.String,System.String)">
            <summary>
            Ensures that the specified URI is a relative one, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.AbsoluteUriException"/>.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.AbsoluteUriException">Thrown when <paramref name = "parameter"/> is an absolute URI.</exception>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeRelativeUri(System.Uri,System.Func{System.Uri,System.Exception})">
            <summary>
            Ensures that the specified URI is a relative one, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">Your custom exception thrown when <paramref name = "parameter"/> is an absolute URI, or when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveScheme(System.Uri,System.String,System.String,System.String)">
            <summary>
            Ensures that the <paramref name = "parameter"/> has the specified scheme, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/>.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "scheme">The scheme that the URI should have.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException">Thrown when <paramref name = "parameter"/> uses a different scheme than the specified one.</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.RelativeUriException">Thrown when <paramref name = "parameter"/> is relative and thus has no scheme.</exception>
            <exception cref = "T:System.ArgumentNullException">Throw when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveScheme(System.Uri,System.String,System.Func{System.Uri,System.Exception})">
            <summary>
            Ensures that the <paramref name = "parameter"/> has the specified scheme, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "scheme">The scheme that the URI should have.</param>
            <param name = "exceptionFactory">The delegate that creates the exception to be thrown. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> uses a different scheme than the specified one,
            or when <paramref name = "parameter"/> is a relative URI,
            or when <paramref name = "parameter"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveScheme(System.Uri,System.String,System.Func{System.Uri,System.String,System.Exception})">
            <summary>
            Ensures that the <paramref name = "parameter"/> has the specified scheme, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "scheme">The scheme that the URI should have.</param>
            <param name = "exceptionFactory">The delegate that creates the exception to be thrown. <paramref name = "parameter"/> and <paramref name = "scheme"/> are passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> uses a different scheme than the specified one,
            or when <paramref name = "parameter"/> is a relative URI,
            or when <paramref name = "parameter"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeHttpsUrl(System.Uri,System.String,System.String)">
            <summary>
            Ensures that the specified URI has the "https" scheme, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/>.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException">Thrown when <paramref name = "parameter"/> uses a different scheme than "https".</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.RelativeUriException">Thrown when <paramref name = "parameter"/> is relative and thus has no scheme.</exception>
            <exception cref = "T:System.ArgumentNullException">Throw when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeHttpsUrl(System.Uri,System.Func{System.Uri,System.Exception})">
            <summary>
            Ensures that the specified URI has the "https" scheme, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates the exception to be thrown. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> uses a different scheme than "https",
            or when <paramref name = "parameter"/> is a relative URI,
            or when <paramref name = "parameter"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeHttpUrl(System.Uri,System.String,System.String)">
            <summary>
            Ensures that the specified URI has the "http" scheme, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/>.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException">Thrown when <paramref name = "parameter"/> uses a different scheme than "http".</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.RelativeUriException">Thrown when <paramref name = "parameter"/> is relative and thus has no scheme.</exception>
            <exception cref = "T:System.ArgumentNullException">Throw when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeHttpUrl(System.Uri,System.Func{System.Uri,System.Exception})">
            <summary>
            Ensures that the specified URI has the "http" scheme, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates the exception to be thrown. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> uses a different scheme than "http",
            or when <paramref name = "parameter"/> is a relative URI,
            or when <paramref name = "parameter"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeHttpOrHttpsUrl(System.Uri,System.String,System.String)">
            <summary>
            Ensures that the specified URI has the "http" or "https" scheme, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/>.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException">Thrown when <paramref name = "parameter"/> uses a different scheme than "http" or "https".</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.RelativeUriException">Thrown when <paramref name = "parameter"/> is relative and thus has no scheme.</exception>
            <exception cref = "T:System.ArgumentNullException">Throw when <paramref name = "parameter"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustBeHttpOrHttpsUrl(System.Uri,System.Func{System.Uri,System.Exception})">
            <summary>
            Ensures that the specified URI has the "http" or "https" scheme, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "exceptionFactory">The delegate that creates the exception to be thrown. <paramref name = "parameter"/> is passed to this delegate.</param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when <paramref name = "parameter"/> uses a different scheme than "http" or "https",
            or when <paramref name = "parameter"/> is a relative URI,
            or when <paramref name = "parameter"/> is null.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveOneSchemeOf(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Ensures that the URI has one of the specified schemes, or otherwise throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/>.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "schemes">One of these strings must be equal to the scheme of the URI.</param>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message that will be passed to the resulting exception (optional).</param>
            <exception cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException">Thrown when the scheme <paramref name = "parameter"/> is not equal to one of the specified schemes.</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.RelativeUriException">Thrown when <paramref name = "parameter"/> is relative and thus has no scheme.</exception>
            <exception cref = "T:System.ArgumentNullException">Throw when <paramref name = "parameter"/> or <paramref name = "schemes"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.Check.MustHaveOneSchemeOf``1(System.Uri,``0,System.Func{System.Uri,``0,System.Exception})">
            <summary>
            Ensures that the URI has one of the specified schemes, or otherwise throws your custom exception.
            </summary>
            <param name = "parameter">The URI to be checked.</param>
            <param name = "schemes">One of these strings must be equal to the scheme of the URI.</param>
            <param name = "exceptionFactory">The delegate that creates your custom exception. <paramref name = "parameter"/></param>
            <exception cref = "T:System.Exception">
            Your custom exception thrown when the scheme <paramref name = "parameter"/> is not equal to one of the specified schemes,
            or when <paramref name = "parameter"/> is a relative URI,
            or when <paramref name = "parameter"/> is null.
            </exception>
            <exception cref = "T:System.ArgumentNullException">Throw when <paramref name = "schemes"/> is null.</exception>
        </member>
        <member name="T:Light.GuardClauses.EnumInfo`1">
            <summary>
            Provides meta-information about enum values and the flag bitmask if the enum is marked with the <see cref = "T:System.FlagsAttribute"/>.
            Can be used to validate that an enum value is valid.
            </summary>
            <typeparam name = "T">The type of the enum.</typeparam>
        </member>
        <member name="F:Light.GuardClauses.EnumInfo`1.IsFlagsEnum">
            <summary>
            Gets the value indicating whether the enum type is marked with the flags attribute.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.EnumInfo`1.FlagsPattern">
            <summary>
            Gets the flags pattern when <see cref = "F:Light.GuardClauses.EnumInfo`1.IsFlagsEnum"/> is true. If the enum is not a flags enum, then 0UL is returned.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.EnumInfo`1.UnderlyingType">
            <summary>
            Gets the underlying type that is used for the enum (<see cref = "T:System.Int32"/> for default enums).
            </summary>
        </member>
        <member name="P:Light.GuardClauses.EnumInfo`1.EnumConstants">
            <summary>
            Gets the values of the enum as a read-only collection.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.EnumInfo`1.IsValidEnumValue(`0)">
            <summary>
            Checks if the specified enum value is valid. This is true if either the enum is a standard enum and the enum value corresponds
            to one of the enum constant values or if the enum type is marked with the <see cref = "T:System.FlagsAttribute"/> and the given value
            is a valid combination of bits for this type.
            </summary>
            <param name = "enumValue">The enum value to be checked.</param>
            <returns>True if either the enum value is </returns>
        </member>
        <member name="T:Light.GuardClauses.EquivalentTypeComparer">
            <summary>
            Represents an <see cref = "T:System.Collections.Generic.IEqualityComparer`1"/> that uses <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/>
            to compare types. This check works like the normal type equality comparison, but when two
            generic types are compared, they are regarded as equal when one of them is a constructed generic type
            and the other one is the corresponding generic type definition.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.EquivalentTypeComparer.Instance">
            <summary>
            Gets a singleton instance of the equality comparer.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.EquivalentTypeComparer.Equals(System.Type,System.Type)">
            <summary>
            Checks if the two types are equivalent (using <see cref = "M:Light.GuardClauses.Check.IsEquivalentTypeTo(System.Type,System.Type)"/>).
            This check works like the normal type equality comparison, but when two
            generic types are compared, they are regarded as equal when one of them is a constructed generic type
            and the other one is the corresponding generic type definition.
            </summary>
            <param name = "x">The first type.</param>
            <param name = "y">The second type.</param>
        </member>
        <member name="M:Light.GuardClauses.EquivalentTypeComparer.GetHashCode(System.Type)">
            <summary>
            Returns the hash code of the given type. When the specified type is a constructed generic type,
            the hash code of the generic type definition is returned instead.
            </summary>
            <param name = "type">The type whose hash code is requested.</param>
        </member>
        <member name="T:Light.GuardClauses.OrdinalIgnoreCaseIgnoreWhiteSpaceComparer">
            <summary>
            Represents an <see cref = "T:System.Collections.Generic.IEqualityComparer`1"/> that compares strings using the
            ordinal sort rules, ignoring the case and the white space characters.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.OrdinalIgnoreCaseIgnoreWhiteSpaceComparer.Equals(System.String,System.String)">
            <summary>
            Checks if the two strings are equal using ordinal sorting rules as well as ignoring the case and
            the white space of the provided strings.
            </summary>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "x"/> or <paramref name = "y"/> are null.</exception>
        </member>
        <member name="M:Light.GuardClauses.OrdinalIgnoreCaseIgnoreWhiteSpaceComparer.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the specified string. The hash code is created only from the non-white space characters
            which are interpreted as case-insensitive.
            </summary>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "string"/> is null.</exception>
        </member>
        <member name="T:Light.GuardClauses.OrdinalIgnoreWhiteSpaceComparer">
            <summary>
            Represents an <see cref = "T:System.Collections.Generic.IEqualityComparer`1"/> that compares strings using the
            ordinal sort rules and ignoring the white space characters.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.OrdinalIgnoreWhiteSpaceComparer.Equals(System.String,System.String)">
            <summary>
            Checks if the two strings are equal using ordinal sorting rules as well as ignoring the white space
            of the provided strings.
            </summary>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "x"/> or <paramref name = "y"/> are null.</exception>
        </member>
        <member name="M:Light.GuardClauses.OrdinalIgnoreWhiteSpaceComparer.GetHashCode(System.String)">
            <summary>
            Gets the hash code for the specified string. The hash code is created only from the non-white space characters.
            </summary>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "string"/> is null.</exception>
        </member>
        <member name="T:Light.GuardClauses.Range`1">
            <summary>
            Defines a range that can be used to check if a specified <see cref = "T:System.IComparable`1"/> is in between it or not.
            </summary>
            <typeparam name = "T">The type that the range should be applied to.</typeparam>
        </member>
        <member name="F:Light.GuardClauses.Range`1.From">
            <summary>
            Gets the lower boundary of the range.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.Range`1.To">
            <summary>
            Gets the upper boundary of the range.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.Range`1.IsFromInclusive">
            <summary>
            Gets the value indicating whether the From value is included in the range.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.Range`1.IsToInclusive">
            <summary>
            Gets the value indicating whether the To value is included in the range.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Range`1.#ctor(`0,`0,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Range`1"/>.
            </summary>
            <param name = "from">The lower boundary of the range.</param>
            <param name = "to">The upper boundary of the range.</param>
            <param name = "isFromInclusive">The value indicating whether <paramref name = "from"/> is part of the range.</param>
            <param name = "isToInclusive">The value indicating whether <paramref name = "to"/> is part of the range.</param>
            <exception cref = "T:System.ArgumentOutOfRangeException">Thrown when <paramref name = "to"/> is less than <paramref name = "from"/>.</exception>
        </member>
        <member name="M:Light.GuardClauses.Range`1.IsValueWithinRange(`0)">
            <summary>
            Checks if the specified <paramref name = "value"/> is within range.
            </summary>
            <param name = "value">The value to be checked.</param>
            <returns>True if value is within range, otherwise false.</returns>
        </member>
        <member name="M:Light.GuardClauses.Range`1.FromInclusive(`0)">
            <summary>
            Use this method to create a range in a fluent style using method chaining.
            Defines the lower boundary as an inclusive value.
            </summary>
            <param name = "value">The value that indicates the inclusive lower boundary of the resulting range.</param>
            <returns>A value you can use to fluently define the upper boundary of a new range.</returns>
        </member>
        <member name="M:Light.GuardClauses.Range`1.FromExclusive(`0)">
            <summary>
            Use this method to create a range in a fluent style using method chaining.
            Defines the lower boundary as an exclusive value.
            </summary>
            <param name = "value">The value that indicates the exclusive lower boundary of the resulting range.</param>
            <returns>A value you can use to fluently define the upper boundary of a new range.</returns>
        </member>
        <member name="T:Light.GuardClauses.Range`1.RangeFromInfo">
            <summary>
            The nested <see cref = "T:Light.GuardClauses.Range`1.RangeFromInfo"/> can be used to fluently create a <see cref = "T:Light.GuardClauses.Range`1"/>.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Range`1.RangeFromInfo.#ctor(`0,System.Boolean)">
            <summary>
            Creates a new RangeFromInfo.
            </summary>
            <param name = "from">The lower boundary of the range.</param>
            <param name = "isFromInclusive">The value indicating whether <paramref name = "from"/> is part of the range.</param>
        </member>
        <member name="M:Light.GuardClauses.Range`1.RangeFromInfo.ToExclusive(`0)">
            <summary>
            Use this method to create a range in a fluent style using method chaining.
            Defines the upper boundary as an exclusive value.
            </summary>
            <param name = "value">The value that indicates the exclusive upper boundary of the resulting range.</param>
            <returns>A new range with the specified upper and lower boundaries.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name = "value"/> is less than the lower boundary value.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Range`1.RangeFromInfo.ToInclusive(`0)">
            <summary>
            Use this method to create a range in a fluent style using method chaining.
            Defines the upper boundary as an inclusive value.
            </summary>
            <param name = "value">The value that indicates the inclusive upper boundary of the resulting range.</param>
            <returns>A new range with the specified upper and lower boundaries.</returns>
            <exception cref = "T:System.ArgumentOutOfRangeException">
            Thrown when <paramref name = "value"/> is less than the lower boundary value.
            </exception>
        </member>
        <member name="M:Light.GuardClauses.Range`1.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Light.GuardClauses.Range`1.LowerBoundaryText">
            <summary>
            Returns either "inclusive" or "exclusive", depending whether <see cref = "F:Light.GuardClauses.Range`1.IsFromInclusive"/> is true or false.
            </summary>
        </member>
        <member name="P:Light.GuardClauses.Range`1.UpperBoundaryText">
            <summary>
            Returns either "inclusive" or "exclusive", depending whether <see cref = "F:Light.GuardClauses.Range`1.IsToInclusive"/> is true or false.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Range`1.CreateRangeDescriptionText(System.String)">
            <summary>
            Returns a text description of this range with the following pattern: From (inclusive | exclusive) to To (inclusive | exclusive).
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Range`1.Equals(Light.GuardClauses.Range{`0})">
            <inheritdoc/>
        </member>
        <member name="M:Light.GuardClauses.Range`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Light.GuardClauses.Range`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Light.GuardClauses.Range`1.op_Equality(Light.GuardClauses.Range{`0},Light.GuardClauses.Range{`0})">
            <summary>
            Checks if two ranges are equal.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Range`1.op_Inequality(Light.GuardClauses.Range{`0},Light.GuardClauses.Range{`0})">
            <summary>
            Checks if two ranges are not equal.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.Range">
            <summary>
            Provides methods to simplify the creation of <see cref = "T:Light.GuardClauses.Range`1"/> instances.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Range.FromInclusive``1(``0)">
            <summary>
            Use this method to create a range in a fluent style using method chaining.
            Defines the lower boundary as an inclusive value.
            </summary>
            <param name = "value">The value that indicates the inclusive lower boundary of the resulting range.</param>
            <returns>A value you can use to fluently define the upper boundary of a new range.</returns>
        </member>
        <member name="M:Light.GuardClauses.Range.FromExclusive``1(``0)">
            <summary>
            Use this method to create a range in a fluent style using method chaining.
            Defines the lower boundary as an exclusive value.
            </summary>
            <param name = "value">The value that indicates the exclusive lower boundary of the resulting range.</param>
            <returns>A value you can use to fluently define the upper boundary of a new range.</returns>
        </member>
        <member name="T:Light.GuardClauses.RegularExpressions">
            <summary>
            Provides regular expressions that are used in string assertions.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.RegularExpressions.EmailRegex">
            <summary>
            Gets the default regular expression for email validation.
            This pattern is based on https://www.rhyous.com/2010/06/15/csharp-email-regular-expression/ and
            was modified to satisfy all tests of https://blogs.msdn.microsoft.com/testing123/2009/02/06/email-address-test-cases/.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.SpanExceptionFactory`2">
            <summary>
            Represents a delegate that receives a span and a value as parameters and that produces an exception.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.ReadOnlySpanExceptionFactory`2">
            <summary>
            Represents a delegate that receives a read-only span and a value as parameters and that produces an exception.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.StringComparisonType">
            <summary>
            Specifies the culture, case , and sort rules when comparing strings.
            </summary>
            <remarks>
            This enum is en extension of <see cref = "T:System.StringComparison"/>, adding
            capabilities to ignore white space when making string equality comparisons.
            See the <see cref = "M:Light.GuardClauses.Check.Equals(System.String,System.String,Light.GuardClauses.StringComparisonType)"/> when
            you want to compare in such a way.
            </remarks>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.CurrentCulture">
            <summary>
            Compare strings using culture-sensitive sort rules and the current culture.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.CurrentCultureIgnoreCase">
            <summary>
            Compare strings using culture-sensitive sort rules, the current culture, and
            ignoring the case of the strings being compared.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.InvariantCulture">
            <summary>
            Compare strings using culture-sensitive sort rules and the invariant culture.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.InvariantCultureIgnoreCase">
            <summary>
            Compare strings using culture-sensitive sort rules, the invariant culture, and
            ignoring the case of the strings being compared.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.Ordinal">
            <summary>
            Compare strings using ordinal sort rules.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.OrdinalIgnoreCase">
            <summary>
            Compare strings using ordinal sort rules and ignoring the case of the strings
            being compared.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.OrdinalIgnoreWhiteSpace">
            <summary>
            Compare strings using ordinal sort rules and ignoring the white space characters
            of the strings being compared.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.StringComparisonType.OrdinalIgnoreCaseIgnoreWhiteSpace">
            <summary>
            Compare strings using ordinal sort rules, ignoring the case and ignoring the
            white space characters of the strings being compared.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.Types">
            <summary>
            This class caches <see cref = "T:System.Type"/> instances to avoid use of the typeof operator.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.Types.FlagsAttributeType">
            <summary>
            Gets the <see cref = "T:System.FlagsAttribute"/> type.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.AbsoluteUriException">
            <summary>
            This exception indicates that an URI is absolute instead of relative.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.AbsoluteUriException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.AbsoluteUriException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.AbsoluteUriException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.ArgumentDefaultException">
            <summary>
            This exception indicates that a value of a value type is the default value.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ArgumentDefaultException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.ArgumentDefaultException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ArgumentDefaultException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.CollectionException">
            <summary>
            This exception indicates that the state of a collection is invalid.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.CollectionException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.CollectionException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.CollectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.EmptyCollectionException">
            <summary>
            This exception indicates that a collection has no items.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EmptyCollectionException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.EmptyCollectionException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EmptyCollectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.EmptyGuidException">
            <summary>
            This exception indicates that that a GUID is empty.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EmptyGuidException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.EmptyGuidException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EmptyGuidException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.EmptyStringException">
            <summary>
            This exception indicates that a string is empty.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EmptyStringException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.EmptyStringException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EmptyStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.EnumValueNotDefinedException">
            <summary>
            This exception indicates that a value is not defined in the corresponding enum type.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EnumValueNotDefinedException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.EnumValueNotDefinedException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter.</param>
            <param name = "message">The message of the exception.</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.EnumValueNotDefinedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.ExistingItemException">
            <summary>
            This exception indicates that a collection contains an item that must not be part of it.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ExistingItemException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.ExistingItemException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ExistingItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.InvalidCollectionCountException">
            <summary>
            This exception indicates that a collection has an invalid number of items.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidCollectionCountException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidCollectionCountException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.InvalidConfigurationException">
            <summary>
            This exception indicates that configuration data is invalid.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of <see cref = "T:Light.GuardClauses.Exceptions.InvalidConfigurationException"/>.
            </summary>
            <param name = "message">The message of the exception (optional).</param>
            <param name = "innerException">The exception that is the cause of this one (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.InvalidDateTimeException">
            <summary>
            This exception indicates that a <see cref = "T:System.DateTime"/> value is invalid.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidDateTimeException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidDateTimeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.InvalidEmailAddressException">
            <summary>
            This exception indicates that an Email address is invalid.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidEmailAddressException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.InvalidEmailAddressException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidEmailAddressException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.InvalidStateException">
            <summary>
            This exception indicates that the data is in invalid state.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidStateException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.InvalidStateException"/>.
            </summary>
            <param name = "message">The message of the exception (optional).</param>
            <param name = "innerException">The exception that is the cause of this one (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.InvalidUriSchemeException">
            <summary>
            This exception indicates that an URI has an invalid scheme.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidUriSchemeException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.InvalidUriSchemeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.MissingItemException">
            <summary>
            This exception indicates that an item is not present in a collection.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.MissingItemException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.MissingItemException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.MissingItemException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.NullableHasNoValueException">
            <summary>
            This exception indicates that a <see cref = "T:System.Nullable`1"/> has no value.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.NullableHasNoValueException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.NullableHasNoValueException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.NullableHasNoValueException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.RelativeUriException">
            <summary>
            This exception indicates that an URI is relative instead of absolute.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.RelativeUriException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.RelativeUriException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.RelativeUriException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.SameObjectReferenceException">
            <summary>
            This exception indicates that two references point to the same object.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.SameObjectReferenceException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.SameObjectReferenceException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.SameObjectReferenceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.StringDoesNotMatchException">
            <summary>
            This exception indicates that a string is not matching a regular expression.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.StringDoesNotMatchException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.StringDoesNotMatchException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.StringDoesNotMatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.StringException">
            <summary>
            This exception indicates that a string is in an invalid state.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.StringException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.StringException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.StringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.StringLengthException">
            <summary>
            This exception indicates that a string has an invalid length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.StringLengthException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.StringLengthException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.SubstringException">
            <summary>
            This exception indicates that a string is in an invalid state.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.SubstringException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.SubstringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.Throw">
            <summary>
            Provides static factory methods that throw default exceptions.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.ArgumentNull(System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentNullException"/>, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.ArgumentDefault(System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.ArgumentDefaultException"/> indicating that a value is the default value of its type, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidTypeCast(System.Object,System.Type,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.TypeCastException"/> indicating that a reference cannot be downcast, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.EnumValueNotDefined``1(``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.EnumValueNotDefinedException"/> indicating that a value is not one of the constants defined in an enum, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.EmptyGuid(System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.EmptyGuidException"/> indicating that a GUID is empty, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidOperation(System.String)">
            <summary>
            Throws an <see cref = "T:System.InvalidOperationException"/> using the optional message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidState(System.String)">
            <summary>
            Throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidStateException"/> using the optional message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.Argument(System.String,System.String)">
            <summary>
            Throws an <see cref = "T:System.ArgumentException"/> using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidEmailAddress(System.String,System.String,System.String)">
            <summary>
            Throws an <see cref = "T:Light.GuardClauses.Exceptions.InvalidEmailAddressException"/> using the optional message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.NullableHasNoValue(System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.NullableHasNoValueException"/> indicating that a <see cref = "T:System.Nullable`1"/> has no value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustNotBeLessThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must not be less than the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeLessThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must be less than the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustNotBeLessThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must not be less than or equal to the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustNotBeGreaterThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must not be greater than or equal to the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeGreaterThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must be greater than or equal to the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeGreaterThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must be greater than the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustNotBeGreaterThan``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must not be greater than the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeLessThanOrEqualTo``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a comparable value must be less than or equal to the given boundary value, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeInRange``1(``0,Light.GuardClauses.Range{``0},System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a value is not within a specified range, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustNotBeInRange``1(``0,Light.GuardClauses.Range{``0},System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:System.ArgumentOutOfRangeException"/> indicating that a value is within a specified range, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SameObjectReference``1(``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SameObjectReferenceException"/> indicating that two references point to the same object, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.EmptyString(System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.EmptyStringException"/> indicating that a string is empty, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.WhiteSpaceString(System.String,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.WhiteSpaceStringException"/> indicating that a string contains only white space, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringDoesNotMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringDoesNotMatchException"/> indicating that a string does not match a regular expression, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringDoesNotContain(System.String,System.String,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string does not contain another string as a substring, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringDoesNotContain(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string does not contain another string as a substring, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringContains(System.String,System.String,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string does contain another string as a substring, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringContains(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string does contain another string as a substring, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.NotSubstring(System.String,System.String,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string is not a substring of another one, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.NotSubstring(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string is not a substring of another one, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.Substring(System.String,System.String,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string is a substring of another one, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.Substring(System.String,System.String,System.StringComparison,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.SubstringException"/> indicating that a string is a substring of another one, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringNotShorterThan(System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/> indicating that a string is not shorter than the given length, using the optional parameter name an message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringNotShorterThanOrEqualTo(System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/> indicating that a string is not shorter or equal to the given length, using the optional parameter name an message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringLengthNotEqualTo(System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/> indicating that a string has a different length than the specified one, using the optional parameter name an message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringNotLongerThan(System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/> indicating that a string is not longer than the given length, using the optional parameter name an message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringNotLongerThanOrEqualTo(System.String,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/> indicating that a string is not longer or equal to the given length, using the optional parameter name an message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.StringLengthNotInRange(System.String,Light.GuardClauses.Range{System.Int32},System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringLengthException"/> indicating that a string's length is not in between the given range, using the optional parameter name an message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.NotNewLine(System.String,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.StringException"/> indicating that a string is not equal to "\n" or "\r\n".
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.ValuesNotEqual``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException"/> indicating that two values are not equal, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.ValuesEqual``1(``0,``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException"/> indicating that two values are equal, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidCollectionCount(System.Collections.IEnumerable,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a collection has an invalid number of items, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidSpanLength``1(System.Span{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span has an invalid length, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidSpanLength``1(System.ReadOnlySpan{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span has an invalid length, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidMinimumCollectionCount(System.Collections.IEnumerable,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a collection has less than a minimum number of items, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeLongerThan``1(System.Span{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not longer than the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeLongerThan``1(System.ReadOnlySpan{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not longer than the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeLongerThanOrEqualTo``1(System.Span{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not longer than and not equal to the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeLongerThanOrEqualTo``1(System.ReadOnlySpan{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not longer than and not equal to the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeShorterThan``1(System.Span{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not shorter than the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeShorterThanOrEqualTo``1(System.Span{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not shorter than the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeShorterThanOrEqualTo``1(System.ReadOnlySpan{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not shorter than the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.SpanMustBeShorterThan``1(System.ReadOnlySpan{``0}@,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a span is not shorter than the specified length.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.InvalidMaximumCollectionCount(System.Collections.IEnumerable,System.Int32,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidCollectionCountException"/> indicating that a collection has more than a maximum number of items, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.EmptyCollection(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.EmptyCollectionException"/> indicating that a collection has no items, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MissingItem``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.MissingItemException"/> indicating that a collection is not containing the specified item, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.ExistingItem``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.ExistingItemException"/> indicating that a collection contains the specified item that should not be part of it, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.ValueNotOneOf``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.ValueIsNotOneOfException"/> indicating that a value is not one of a specified collection of items, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.ValueIsOneOf``1(``0,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.ValueIsOneOfException"/> indicating that a value is one of a specified collection of items, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeAbsoluteUri(System.Uri,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.RelativeUriException"/> indicating that a URI is relative instead of absolute, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeRelativeUri(System.Uri,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.AbsoluteUriException"/> indicating that a URI is absolute instead of relative, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.UriMustHaveScheme(System.Uri,System.String,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/> indicating that a URI has an unexpected scheme, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.UriMustHaveOneSchemeOf(System.Uri,System.Collections.Generic.IEnumerable{System.String},System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidUriSchemeException"/> indicating that a URI does not use one of a set of expected schemes, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeUtcDateTime(System.DateTime,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException"/> indicating that a date time is not using <see cref = "F:System.DateTimeKind.Utc"/>, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeLocalDateTime(System.DateTime,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException"/> indicating that a date time is not using <see cref = "F:System.DateTimeKind.Local"/>, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.MustBeUnspecifiedDateTime(System.DateTime,System.String,System.String)">
            <summary>
            Throws the default <see cref = "T:Light.GuardClauses.Exceptions.InvalidDateTimeException"/> indicating that a date time is not using <see cref = "F:System.DateTimeKind.Unspecified"/>, using the optional parameter name and message.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.CustomException(System.Func{System.Exception})">
            <summary>
            Throws the exception that is returned by <paramref name = "exceptionFactory"/>.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.CustomException``1(System.Func{``0,System.Exception},``0)">
            <summary>
            Throws the exception that is returned by <paramref name = "exceptionFactory"/>. <paramref name = "parameter"/> is passed to <paramref name = "exceptionFactory"/>.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.CustomException``2(System.Func{``0,``1,System.Exception},``0,``1)">
            <summary>
            Throws the exception that is returned by <paramref name = "exceptionFactory"/>. <paramref name = "first"/> and <paramref name = "second"/> are passed to <paramref name = "exceptionFactory"/>.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.CustomException``3(System.Func{``0,``1,``2,System.Exception},``0,``1,``2)">
            <summary>
            Throws the exception that is returned by <paramref name = "exceptionFactory"/>. <paramref name = "first"/>, <paramref name = "second"/>, and <paramref name = "third"/> are passed to <paramref name = "exceptionFactory"/>.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.CustomSpanException``2(Light.GuardClauses.SpanExceptionFactory{``0,``1},System.Span{``0}@,``1)">
            <summary>
            Throws the exception that is returned by <paramref name = "exceptionFactory"/>. <paramref name = "span"/> and <paramref name = "value"/> are passed to <paramref name = "exceptionFactory"/>.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.Throw.CustomSpanException``2(Light.GuardClauses.ReadOnlySpanExceptionFactory{``0,``1},System.ReadOnlySpan{``0}@,``1)">
            <summary>
            Throws the exception that is returned by <paramref name = "exceptionFactory"/>. <paramref name = "span"/> and <paramref name = "value"/> are passed to <paramref name = "exceptionFactory"/>.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.TypeCastException">
            <summary>
            This exception indicates that a value cannot be cast to another type.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.TypeCastException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.TypeCastException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.TypeCastException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.UriException">
            <summary>
            This exception indicates that an URI is invalid.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.UriException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.UriException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.UriException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.ValueIsNotOneOfException">
            <summary>
            This exception indicates that an item is not part of a collection.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValueIsNotOneOfException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.CollectionException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValueIsNotOneOfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.ValueIsOneOfException">
            <summary>
            This exception indicates that an item is part of a collection.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValueIsOneOfException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.ValueIsOneOfException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValueIsOneOfException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.ValuesEqualException">
            <summary>
            This exception indicates that two values are equal.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValuesEqualException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.ValuesEqualException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValuesEqualException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.ValuesNotEqualException">
            <summary>
            This exception indicates that two values are not equal.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValuesNotEqualException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.ValuesNotEqualException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.ValuesNotEqualException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.Exceptions.WhiteSpaceStringException">
            <summary>
            This exception indicates that a string contains only white space.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.WhiteSpaceStringException.#ctor(System.String,System.String)">
            <summary>
            Creates a new instance of <see cref = "T:Light.GuardClauses.Exceptions.WhiteSpaceStringException"/>.
            </summary>
            <param name = "parameterName">The name of the parameter (optional).</param>
            <param name = "message">The message of the exception (optional).</param>
        </member>
        <member name="M:Light.GuardClauses.Exceptions.WhiteSpaceStringException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc/>
        </member>
        <member name="T:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref = "T:System.Collections.Generic.IEnumerable`1"/> interface.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tries to cast the specified enumerable to an <see cref = "T:System.Collections.Generic.IList`1"/>, or
            creates a new <see cref = "T:System.Collections.Generic.List`1"/> containing the enumerable items.
            </summary>
            <typeparam name = "T">The item type of the enumerable.</typeparam>
            <param name = "source">The enumerable to be transformed.</param>
            <returns>The list containing the items of the enumerable.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "source"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.AsList``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IList{``0}})">
            <summary>
            Tries to cast the specified enumerable to an <see cref = "T:System.Collections.Generic.IList`1"/>, or
            creates a new collection containing the enumerable items by calling the specified delegate.
            </summary>
            <typeparam name = "T">The item type of the collection.</typeparam>
            <param name = "source">The enumerable that will be converted to <see cref = "T:System.Collections.Generic.IList`1"/>.</param>
            <param name = "createCollection">The delegate that creates the collection containing the specified items.</param>
            <returns>The cast enumerable, or a new collection containing the enumerable items.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "source"/> or <paramref name = "createCollection"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tries to downcast the specified enumerable to an array, or creates a new collection
            </summary>
            <typeparam name = "T">The item type of the collection.</typeparam>
            <param name = "source">The enumerable that will be converted to an array.</param>
            <returns>The cast array, or a new array containing the enumerable items.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "source"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Boolean)">
            <summary>
            Performs the action on each item of the specified enumerable.
            </summary>
            <typeparam name = "T">The item type of the enumerable.</typeparam>
            <param name = "enumerable">The collection containing the items that will be passed to the action.</param>
            <param name = "action">The action that executes for each item of the collection.</param>
            <param name = "throwWhenItemIsNull">The value indicating whether this method should throw a <see cref = "T:Light.GuardClauses.Exceptions.CollectionException"/> when any of the items is null (optional). Defaults to true.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "enumerable"/> or <paramref name = "action"/> is null.</exception>
            <exception cref = "T:Light.GuardClauses.Exceptions.CollectionException">Thrown when <paramref name = "enumerable"/> contains a value that is null and <paramref name = "throwWhenItemIsNull"/> is set to true.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.AsReadOnlyList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Tries to cast the specified enumerable as an <see cref = "T:System.Collections.Generic.IReadOnlyList`1"/>, or
            creates a new <see cref = "T:System.Collections.Generic.List`1"/> containing the enumerable items.
            </summary>
            <typeparam name = "T">The item type of the enumerable.</typeparam>
            <param name = "source">The enumerable to be transformed.</param>
            <returns>The list containing the items of the enumerable.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "source"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.AsReadOnlyList``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IReadOnlyList{``0}})">
            <summary>
            Tries to cast the specified enumerable as an <see cref = "T:System.Collections.Generic.IReadOnlyList`1"/>, or
            creates a new collection containing the enumerable items by calling the specified delegate.
            </summary>
            <typeparam name = "T">The item type of the collection.</typeparam>
            <param name = "source">The enumerable that will be converted to <see cref = "T:System.Collections.Generic.IReadOnlyList`1"/>.</param>
            <param name = "createCollection">The delegate that creates the collection containing the specified items.</param>
            <returns>The cast enumerable, or a new collection containing the enumerable items.</returns>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "source"/> or <paramref name = "createCollection"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.Count(System.Collections.IEnumerable)">
            <summary>
            Gets the count of the specified enumerable.
            </summary>
            <param name = "enumerable">The enumerable whose count should be determined.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "enumerable"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.EnumerableExtensions.Count(System.Collections.IEnumerable,System.String,System.String)">
            <summary>
            Gets the count of the specified enumerable.
            </summary>
            <param name = "enumerable">The enumerable whose count should be determined.</param>
            <param name = "parameterName">The name of the parameter that is passed to the <see cref = "T:System.ArgumentNullException"/> (optional).</param>
            <param name = "message">The message that is passed to the <see cref = "T:System.ArgumentNullException"/> (optional).</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "enumerable"/> is null.</exception>
        </member>
        <member name="T:Light.GuardClauses.FrameworkExtensions.ExpressionExtensions">
            <summary>
            Provides extension methods for <see cref = "T:System.Linq.Expressions.Expression"/> instances.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.ExpressionExtensions.ExtractProperty``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Extracts the <see cref = "T:System.Reflection.PropertyInfo"/> from a expression of the shape "object => object.Property".
            </summary>
            <typeparam name = "T">The object type.</typeparam>
            <typeparam name = "TProperty">The type of the property.</typeparam>
            <param name = "expression">The expression where the property info will be extracted from.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "expression"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">
            Throw when the <paramref name = "expression"/> is not of the shape "object => object.Property".
            </exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.ExpressionExtensions.ExtractField``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Extracts the <see cref = "T:System.Reflection.FieldInfo"/> from a expression of the shape "object => object.Field".
            </summary>
            <typeparam name = "T">The object type.</typeparam>
            <typeparam name = "TField">The type of the field.</typeparam>
            <param name = "expression">The expression where the field info will be extracted from.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "expression"/> is null.</exception>
            <exception cref = "T:System.ArgumentException">
            Throw when the <paramref name = "expression"/> is not of the shape "object => object.Field".
            </exception>
        </member>
        <member name="T:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash">
            <summary>
            The <see cref = "T:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash"/> class represents a simple non-cryptographic hash function that uses a prime number
            as seed and then manipulates this value by constantly performing <c>hash = unchecked(hash * SecondPrime + value?.GetHashCode() ?? 0);</c>
            for each given value. It is implemented according to the guidelines of Jon Skeet as stated in this Stack Overflow
            answer: http://stackoverflow.com/a/263416/1560623. IMPORTANT: do not persist any hash codes and rely on them
            to stay the same. Hash codes should only be used in memory within a single process session, usually for the use
            in dictionaries (hash tables) and sets. This algorithm, especially the prime numbers can change even during minor
            releases of Light.GuardClauses.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.FirstPrime">
            <summary>
            This prime number is used as an initial (seed) value when calculating hash codes. Its value is 1322837333.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.SecondPrime">
            <summary>
            The second prime number (397) used for hash code generation. It is applied using the following statement:
            <c>hash = unchecked(hash * SecondPrime + value?.GetHashCode() ?? 0);</c>.
            It is the same value that ReSharper (2018.1) uses for hash code generation.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``2(``0,``1)">
            <summary>
            Creates a hash code from the two specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``3(``0,``1,``2)">
            <summary>
            Creates a hash code from the three specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``4(``0,``1,``2,``3)">
            <summary>
            Creates a hash code from the four specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``5(``0,``1,``2,``3,``4)">
            <summary>
            Creates a hash code from the five specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``6(``0,``1,``2,``3,``4,``5)">
            <summary>
            Creates a hash code from the six specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``7(``0,``1,``2,``3,``4,``5,``6)">
            <summary>
            Creates a hash code from the seven specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``8(``0,``1,``2,``3,``4,``5,``6,``7)">
            <summary>
            Creates a hash code from the eight specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``9(``0,``1,``2,``3,``4,``5,``6,``7,``8)">
            <summary>
            Creates a hash code from the nine specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``10(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9)">
            <summary>
            Creates a hash code from the ten specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``11(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10)">
            <summary>
            Creates a hash code from the eleven specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``12(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11)">
            <summary>
            Creates a hash code from the eleven specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``13(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12)">
            <summary>
            Creates a hash code from the thirteen specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``14(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13)">
            <summary>
            Creates a hash code from the fourteen specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``15(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14)">
            <summary>
            Creates a hash code from the fifteen specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CreateHashCode``16(``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15)">
            <summary>
            Creates a hash code from the sixteen specified values.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CombineIntoHash``1(System.Int32@,``0)">
            <summary>
            Mutates the given hash with the specified value using the following statement:
            <c>hash = unchecked(hash * SecondPrime + value?.GetHashCode() ?? 0);</c>.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.FrameworkExtensions.MultiplyAddHashBuilder">
            <summary>
            Represents a builder for the <see cref = "T:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash"/> algorithm that does not allocate.
            Should only be used in cases where the overload for sixteen values is not enough or a dedicated
            initial hash must be provided (e.g. for test reasons).
            Instantiate the builder with the <see cref = "M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHashBuilder.Create(System.Int32)"/> method. You have to instantiate a builder
            for each hash code that you want to calculate.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHashBuilder.CombineIntoHash``1(``0)">
            <summary>
            Combines the given value into the hash using the <see cref = "M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHash.CombineIntoHash``1(System.Int32@,``0)"/> method.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHashBuilder.BuildHash">
            <summary>
            Returns the calculated hash code.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.MultiplyAddHashBuilder.Create(System.Int32)">
            <summary>
            Initializes a new instance of <see cref = "T:Light.GuardClauses.FrameworkExtensions.MultiplyAddHashBuilder"/> with the specified initial hash.
            </summary>
        </member>
        <member name="T:Light.GuardClauses.FrameworkExtensions.TextExtensions">
            <summary>
            Provides extension methods for <see cref = "T:System.String"/> and <see cref = "T:System.Text.StringBuilder"/> to easily assembly error messages.
            </summary>
        </member>
        <member name="F:Light.GuardClauses.FrameworkExtensions.TextExtensions.DefaultNewLineSeparator">
            <summary>
            Gets the default NewLineSeparator. This value is $",{Environment.NewLine}".
            </summary>
        </member>
        <member name="F:Light.GuardClauses.FrameworkExtensions.TextExtensions.UnquotedTypes">
            <summary>
            Gets the list of types that will not be surrounded by quotation marks in error messages.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.ToStringOrNull``1(``0,System.String)">
            <summary>
            Returns the string representation of <paramref name = "value"/>, or <paramref name = "nullText"/> if <paramref name = "value"/> is null.
            If the type of <paramref name = "value"/> is not one of <see cref = "F:Light.GuardClauses.FrameworkExtensions.TextExtensions.UnquotedTypes"/>, then quotation marks will be put around the string representation.
            </summary>
            <param name = "value">The item whose string representation should be returned.</param>
            <param name = "nullText">The text that is returned when <paramref name = "value"/> is null (defaults to "null").</param>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.ToStringRepresentation``1(``0)">
            <summary>
            Returns the string representation of <paramref name = "value"/>. This is done by calling <see cref = "M:System.Object.ToString"/>. If the type of
            <paramref name = "value"/> is not one of <see cref = "F:Light.GuardClauses.FrameworkExtensions.TextExtensions.UnquotedTypes"/>, then the resulting string will be wrapped in quotation marks.
            </summary>
            <param name = "value">The value whose string representation is requested.</param>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.AppendCollectionContent``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Appends the content of the collection with the specified header line to the string builder.
            Each item is on a new line.
            </summary>
            <typeparam name = "T">The item type of the collection.</typeparam>
            <param name = "stringBuilder">The string builder that the content is appended to.</param>
            <param name = "items">The collection whose items will be appended to the string builder.</param>
            <param name = "headerLine">The string that will be placed before the actual items as a header.</param>
            <param name = "finishWithNewLine">The value indicating if a new line is added after the last item. This value defaults to true.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "stringBuilder"/> or <paramref name = "items"/>is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.AppendItems``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.String,System.String)">
            <summary>
            Appends the string representations of the specified items to the string builder.
            </summary>
            <param name = "stringBuilder">The string builder where the items will be appended to.</param>
            <param name = "items">The items to be appended.</param>
            <param name = "itemSeparator">The characters used to separate the items. Defaults to ", " and is not appended after the last item.</param>
            <param name = "emptyCollectionText">The text that is appended to the string builder when <paramref name = "items"/> is empty. Defaults to "empty collection".</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "stringBuilder"/> or <paramref name = "items"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.AppendItemsWithNewLine``1(System.Text.StringBuilder,System.Collections.Generic.IEnumerable{``0},System.String,System.Boolean)">
            <summary>
            Appends the string representations of the specified items to the string builder. Each item is on its own line.
            </summary>
            <param name = "stringBuilder">The string builder where the items will be appended to.</param>
            <param name = "items">The items to be appended.</param>
            <param name = "emptyCollectionText">The text that is appended to the string builder when <paramref name = "items"/> is empty. Defaults to "empty collection".</param>
            <param name = "finishWithNewLine">The value indicating if a new line is added after the last item. This value defaults to true.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "stringBuilder"/> or <paramref name = "items"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.AppendIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Appends the value to the specified string builder if the condition is true.
            </summary>
            <param name = "stringBuilder">The string builder where <paramref name = "value"/> will be appended to.</param>
            <param name = "condition">The boolean value indicating whether the append will be performed or not.</param>
            <param name = "value">The value to be appended to the string builder.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "stringBuilder"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.AppendLineIf(System.Text.StringBuilder,System.Boolean,System.String)">
            <summary>
            Appends the value followed by a new line separator to the specified string builder if the condition is true.
            </summary>
            <param name = "stringBuilder">The string builder where <paramref name = "value"/> will be appended to.</param>
            <param name = "condition">The boolean value indicating whether the append will be performed or not.</param>
            <param name = "value">The value to be appended to the string builder (optional). This value defaults to an empty string.</param>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "stringBuilder"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.AppendExceptionMessages(System.Text.StringBuilder,System.Exception)">
            <summary>
            Appends the messages of the <paramref name = "exception"/> and its nested exceptions to the
            specified <paramref name = "stringBuilder"/>.
            </summary>
            <exception cref = "T:System.ArgumentNullException">Thrown when any parameter is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.GetAllExceptionMessages(System.Exception)">
            <summary>
            Formats all messages of the <paramref name = "exception"/> and its nested exceptions into
            a single string.
            </summary>
            <exception cref = "T:System.ArgumentNullException">Thrown when <paramref name = "exception"/> is null.</exception>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.EqualsOrdinalIgnoreWhiteSpace(System.String,System.String)">
            <summary>
            Checks if the two strings are equal using ordinal sorting rules as well as ignoring the white space
            of the provided strings.
            </summary>
        </member>
        <member name="M:Light.GuardClauses.FrameworkExtensions.TextExtensions.EqualsOrdinalIgnoreCaseIgnoreWhiteSpace(System.String,System.String)">
            <summary>
            Checks if the two strings are equal using ordinal sorting rules, ignoring the case of the letters
            as well as ignoring the white space of the provided strings.
            </summary>
        </member>
        <member name="T:JetBrains.Annotations.NotNullAttribute">
            <summary>
            Indicates that the value of the marked element could never be <c>null</c>.
            </summary>
            <example><code>
            [NotNull] object Foo() {
              return null; // Warning: Possible 'null' assignment
            }
            </code></example>
        </member>
        <member name="T:JetBrains.Annotations.ContractAnnotationAttribute">
            <summary>
            Describes dependency between method input and output.
            </summary>
            <syntax>
            <p>Function Definition Table syntax:</p>
            <list>
            <item>FDT      ::= FDTRow [;FDTRow]*</item>
            <item>FDTRow   ::= Input =&gt; Output | Output &lt;= Input</item>
            <item>Input    ::= ParameterName: Value [, Input]*</item>
            <item>Output   ::= [ParameterName: Value]* {halt|stop|void|nothing|Value}</item>
            <item>Value    ::= true | false | null | notnull | canbenull</item>
            </list>
            If method has single input parameter, it's name could be omitted.<br/>
            Using <c>halt</c> (or <c>void</c>/<c>nothing</c>, which is the same) for method output
            means that the methos doesn't return normally (throws or terminates the process).<br/>
            Value <c>canbenull</c> is only applicable for output parameters.<br/>
            You can use multiple <c>[ContractAnnotation]</c> for each FDT row, or use single attribute
            with rows separated by semicolon. There is no notion of order rows, all rows are checked
            for applicability and applied per each program state tracked by R# analysis.<br/>
            </syntax>
            <examples><list>
            <item><code>
            [ContractAnnotation("=&gt; halt")]
            public void TerminationMethod()
            </code></item>
            <item><code>
            [ContractAnnotation("halt &lt;= condition: false")]
            public void Assert(bool condition, string text) // regular assertion method
            </code></item>
            <item><code>
            [ContractAnnotation("s:null =&gt; true")]
            public bool IsNullOrEmpty(string s) // string.IsNullOrEmpty()
            </code></item>
            <item><code>
            // A method that returns null if the parameter is null,
            // and not null if the parameter is not null
            [ContractAnnotation("null =&gt; null; notnull =&gt; notnull")]
            public object Transform(object data) 
            </code></item>
            <item><code>
            [ContractAnnotation("=&gt; true, result: notnull; =&gt; false, result: null")]
            public bool TryParse(string s, out Person result)
            </code></item>
            </list></examples>
        </member>
    </members>
</doc>
System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that <see langword = "null"/> is allowed as an input even if the
            corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.AllowNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:System.Diagnostics.CodeAnalysis.AllowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that <see langword = "null"/> is disallowed as an input even if the
            corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DisallowNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Specifies that a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated <see cref = "T:System.Boolean"/>
            parameter is passed the specified value.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            Code after the method is considered unreachable by diagnostics if the argument
            to the associated parameter matches this value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref = "T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute"/>
            class with the specified parameter value.
            </summary>
            <param name = "parameterValue">
            The condition parameter value.
            Code after the method is considered unreachable by diagnostics if the argument
            to the associated parameter matches this value.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be <see langword = "null"/> even if the
            corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref = "P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, 
            the parameter may be <see langword = "null"/> even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            If the method returns this value, the associated parameter may be <see langword = "null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name = "returnValue">
            The return value condition.
            If the method returns this value, the associated parameter may be <see langword = "null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output is not <see langword = "null"/> even if the
            corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref = "T:System.Diagnostics.CodeAnalysis.NotNullAttribute"/> class.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-<see langword = "null"/> if the
            named parameter is non-<see langword = "null"/>.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            The output will be non-<see langword = "null"/> if the argument to the
            parameter specified is non-<see langword = "null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name = "parameterName">
            The associated parameter name.
            The output will be non-<see langword = "null"/> if the argument to the
            parameter specified is non-<see langword = "null"/>.
            </param>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref = "P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>,
            the parameter will not be <see langword = "null"/> even if the corresponding type allows it.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            If the method returns this value, the associated parameter will not be <see langword = "null"/>.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name = "returnValue">
            The return value condition.
            If the method returns this value, the associated parameter will not be <see langword = "null"/>.
            </param>
        </member>
    </members>
</doc>
